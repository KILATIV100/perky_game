import os
import json
import logging
from datetime import datetime
from typing import Dict, Optional

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, PreCheckoutQueryHandler, ShippingQueryHandler
from telegram.constants import ParseMode
import asyncio
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
import uvicorn
from pydantic import BaseModel

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL')
PORT = int(os.getenv('PORT', 8000))

# FastAPI –¥–æ–¥–∞—Ç–æ–∫
app = FastAPI(title="Perky Coffee Jump WebApp")

# Pydantic –º–æ–¥–µ–ª—ñ –¥–ª—è API
class GameStats(BaseModel):
    user_id: int
    score: int
    collected_beans: int

class UserStats(BaseModel):
    user_id: int
    username: Optional[str] = None
    max_height: int = 0
    total_beans: int = 0
    games_played: int = 0
    last_played: Optional[str] = None

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
class Database:
    def __init__(self, db_path: str = "perky_jump.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    max_height INTEGER DEFAULT 0,
                    total_beans INTEGER DEFAULT 0,
                    games_played INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_played TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü—è —ñ–≥–æ—Ä
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS games (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    score INTEGER,
                    beans_collected INTEGER,
                    played_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü—è –∑–∞–º–æ–≤–ª–µ–Ω—å
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    product_name TEXT,
                    price INTEGER,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            conn.commit()
    
    def get_user_stats(self, user_id: int) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, username, max_height, total_beans, games_played, last_played
                FROM users WHERE user_id = ?
            ''', (user_id,))
            
            result = cursor.fetchone()
            if result:
                return {
                    'user_id': result[0],
                    'username': result[1],
                    'max_height': result[2],
                    'total_beans': result[3],
                    'games_played': result[4],
                    'last_played': result[5]
                }
            return None
    
    def save_user(self, user_id: int, username: str = None, first_name: str = None):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username, first_name)
                VALUES (?, ?, ?)
            ''', (user_id, username, first_name))
            conn.commit()
    
    def save_game_result(self, user_id: int, score: int, beans_collected: int):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –ø—Ä–æ –≥—Ä—É
            cursor.execute('''
                INSERT INTO games (user_id, score, beans_collected)
                VALUES (?, ?, ?)
            ''', (user_id, score, beans_collected))
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            cursor.execute('''
                UPDATE users SET 
                    max_height = MAX(max_height, ?),
                    total_beans = total_beans + ?,
                    games_played = games_played + 1,
                    last_played = CURRENT_TIMESTAMP
                WHERE user_id = ?
            ''', (score, beans_collected, user_id))
            
            conn.commit()
    
    def get_leaderboard(self, limit: int = 10) -> list:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT username, first_name, max_height, total_beans
                FROM users 
                WHERE games_played > 0
                ORDER BY max_height DESC
                LIMIT ?
            ''', (limit,))
            
            return cursor.fetchall()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()

# –¢–æ–≤–∞—Ä–∏ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ
SHOP_ITEMS = {
    'coffee_cup': {
        'name': '‚òï –ö–∞–≤–æ–≤–∞ —á–∞—à–∫–∞ Perky',
        'description': '–°—Ç–∏–ª—å–Ω–∞ –∫–µ—Ä–∞–º—ñ—á–Ω–∞ —á–∞—à–∫–∞ –∑ –ª–æ–≥–æ—Ç–∏–ø–æ–º Perky Coffee Jump',
        'price': 25000,  # –≤ –∫–æ–ø—ñ–π–∫–∞—Ö (250 –≥—Ä–Ω)
        'currency': 'UAH',
        'photo': 'https://example.com/coffee_cup.jpg'
    },
    'tshirt': {
        'name': 'üëï –§—É—Ç–±–æ–ª–∫–∞ Perky',
        'description': '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞ –±–∞–≤–æ–≤–Ω—è–Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º –≥—Ä–∏',
        'price': 45000,  # 450 –≥—Ä–Ω
        'currency': 'UAH',
        'photo': 'https://example.com/tshirt.jpg'
    },
    'travel_mug': {
        'name': 'ü•§ –¢–µ—Ä–º–æ–∫—Ä—É–∂–∫–∞ Perky',
        'description': '–ü–æ–¥–æ—Ä–æ–∂–Ω—è —Ç–µ—Ä–º–æ–∫—Ä—É–∂–∫–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö –∫–∞–≤–æ–º–∞–Ω—ñ–≤',
        'price': 35000,  # 350 –≥—Ä–Ω
        'currency': 'UAH',
        'photo': 'https://example.com/travel_mug.jpg'
    },
    'coffee_beans': {
        'name': 'üçµ –ö–∞–≤–∞ Perky Blend',
        'description': '–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞ —Å—É–º—ñ—à –∫–∞–≤–æ–≤–∏—Ö –∑–µ—Ä–µ–Ω –≤—ñ–¥ Perky Coffee',
        'price': 30000,  # 300 –≥—Ä–Ω
        'currency': 'UAH',
        'photo': 'https://example.com/coffee_beans.jpg'
    }
}

# Telegram Bot —Ñ—É–Ω–∫—Ü—ñ—ó
class PerkyCoffeeBot:
    def __init__(self):
        self.application = None
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
        user = update.effective_user
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
        db.save_user(user.id, user.username, user.first_name)
        
        welcome_message = f"""
ü§ñ‚òï –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Perky Coffee Jump!

–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã

–¶–µ –∑–∞—Ö–æ–ø–ª—é—é—á–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä-–≥—Ä–∞, –¥–µ —Ç–∏ –≥—Ä–∞—î—à –∑–∞ –∫–∞–≤–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞, —è–∫–∏–π –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø—ñ–¥—Å—Ç—Ä–∏–±–Ω—É—Ç–∏ —è–∫–æ–º–æ–≥–∞ –≤–∏—â–µ, –∑–±–∏—Ä–∞—é—á–∏ –∫–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞!

üéÆ –Ø–∫ –≥—Ä–∞—Ç–∏:
‚Ä¢ –°—Ç—Ä–∏–±–∞–π –∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
‚Ä¢ –ó–±–∏—Ä–∞–π –∫–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞ ‚òï
‚Ä¢ –ù–∞–º–∞–≥–∞–π—Å—è –¥–æ—Å—è–≥—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –≤–∏—Å–æ—Ç–∏!

–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game"))],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop')],
            [InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'stats':
            await self.show_stats(query)
        elif query.data == 'shop':
            await self.show_shop(query)
        elif query.data == 'help':
            await self.show_help(query)
        elif query.data == 'leaderboard':
            await self.show_leaderboard(query)
        elif query.data == 'back_main':
            await self.back_to_main(query)
        elif query.data.startswith('buy_'):
            item_id = query.data.replace('buy_', '')
            await self.buy_item(query, item_id)
    
    async def show_stats(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        user_id = query.from_user.id
        stats = db.get_user_stats(user_id)
        
        if not stats or stats['games_played'] == 0:
            stats_text = """
üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üéÆ –Ü–≥–æ—Ä –∑—ñ–≥—Ä–∞–Ω–æ: 0
üèîÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∏—Å–æ—Ç–∞: 0 –º
‚òï –ó—ñ–±—Ä–∞–Ω–æ –∑–µ—Ä–µ–Ω: 0
üìÖ –û—Å—Ç–∞–Ω–Ω—è –≥—Ä–∞: –©–µ –Ω–µ –≥—Ä–∞–≤

–ß–∞—Å –ø–æ—á–∞—Ç–∏ —Å–≤–æ—é –ø–µ—Ä—à—É –≥—Ä—É! üöÄ
            """
        else:
            last_played = stats['last_played']
            if last_played:
                last_played = datetime.fromisoformat(last_played).strftime("%d.%m.%Y %H:%M")
            
            stats_text = f"""
üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üéÆ –Ü–≥–æ—Ä –∑—ñ–≥—Ä–∞–Ω–æ: {stats['games_played']}
üèîÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∏—Å–æ—Ç–∞: {stats['max_height']} –º
‚òï –ó—ñ–±—Ä–∞–Ω–æ –∑–µ—Ä–µ–Ω: {stats['total_beans']}
üìÖ –û—Å—Ç–∞–Ω–Ω—è –≥—Ä–∞: {last_played or '–ù–µ–≤—ñ–¥–æ–º–æ'}

–ü—Ä–æ–¥–æ–≤–∂—É–π –≥—Ä–∞—Ç–∏ —Ç–∞ –ø–æ–∫—Ä–∞—â—É–π —Å–≤–æ—ó —Ä–µ–∫–æ—Ä–¥–∏! üèÜ
            """
        
        keyboard = [
            [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤", callback_data='leaderboard')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup
        )
    
    async def show_leaderboard(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤"""
        leaderboard = db.get_leaderboard(10)
        
        if not leaderboard:
            leaderboard_text = """
üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤

–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.
–°—Ç–∞–Ω—å –ø–µ—Ä—à–∏–º! üöÄ
            """
        else:
            leaderboard_text = "üèÜ –¢–æ–ø-10 –≥—Ä–∞–≤—Ü—ñ–≤:\n\n"
            
            for i, (username, first_name, max_height, total_beans) in enumerate(leaderboard, 1):
                name = username or first_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π"
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                leaderboard_text += f"{emoji} {name}\nüèîÔ∏è {max_height} –º | ‚òï {total_beans} –∑–µ—Ä–µ–Ω\n\n"
        
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data='stats')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            leaderboard_text,
            reply_markup=reply_markup
        )
    
    async def show_shop(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω"""
        shop_text = """
üõí –ú–∞–≥–∞–∑–∏–Ω Perky Coffee

–ö—É–ø—É–π –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π –º–µ—Ä—á —Ç–∞ –∫–∞–≤–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏!
–í—Å—ñ –ø–æ–∫—É–ø–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å —Ä–æ–∑–≤–∏—Ç–æ–∫ –≥—Ä–∏ ‚ù§Ô∏è
        """
        
        keyboard = []
        for item_id, item in SHOP_ITEMS.items():
            price_grn = item['price'] // 100
            keyboard.append([
                InlineKeyboardButton(
                    f"{item['name']} - {price_grn} –≥—Ä–Ω", 
                    callback_data=f'buy_{item_id}'
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            shop_text,
            reply_markup=reply_markup
        )
    
    async def buy_item(self, query, item_id: str):
        """–ö—É–ø–∏—Ç–∏ —Ç–æ–≤–∞—Ä"""
        if item_id not in SHOP_ITEMS:
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        item = SHOP_ITEMS[item_id]
        
        # –¢—É—Ç –±—É–¥–µ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Telegram Payments
        # –ü–æ–∫–∏ —â–æ –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä
        item_text = f"""
{item['name']}

{item['description']}

üí∞ –¶—ñ–Ω–∞: {item['price'] // 100} –≥—Ä–Ω

üîú –û–ø–ª–∞—Ç–∞ –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º!
–ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏.
        """
        
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", callback_data='shop')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            item_text,
            reply_markup=reply_markup
        )
    
    async def show_help(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É"""
        help_text = """
‚ùì –Ø–∫ –≥—Ä–∞—Ç–∏ –≤ Perky Coffee Jump

üéÆ –ö–µ—Ä—É–≤–∞–Ω–Ω—è:
‚Ä¢ –ù–∞ –º–æ–±—ñ–ª—å–Ω–æ–º—É: —Ç–æ—Ä–∫–∞–π—Å—è –µ–∫—Ä–∞–Ω—É –¥–ª—è —Å—Ç—Ä–∏–±–∫—ñ–≤
‚Ä¢ –ù–∞ –∫–æ–º–ø'—é—Ç–µ—Ä—ñ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–ª–∞–≤—ñ—à—ñ —Å—Ç—Ä—ñ–ª–æ–∫ –∞–±–æ WASD

üéØ –ú–µ—Ç–∞ –≥—Ä–∏:
‚Ä¢ –°—Ç—Ä–∏–±–∞–π —è–∫–æ–º–æ–≥–∞ –≤–∏—â–µ
‚Ä¢ –ó–±–∏—Ä–∞–π –∫–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞ ‚òï
‚Ä¢ –ù–µ –ø–∞–¥–∞–π –≤–Ω–∏–∑!

üèÜ –û—á–∫–∏:
‚Ä¢ –í–∏—Å–æ—Ç–∞ = –æ—á–∫–∏
‚Ä¢ –ö–æ–∂–Ω–µ –∑–µ—Ä–Ω–æ –¥–æ–¥–∞—î –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤–ª—é–π –Ω–æ–≤—ñ —Ä–µ–∫–æ—Ä–¥–∏!

üí° –ü–æ—Ä–∞–¥–∏:
‚Ä¢ –†–µ—Ç–µ–ª—å–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É–π —Å—Ç—Ä–∏–±–∫–∏
‚Ä¢ –ó–±–∏—Ä–∞–π –≤—Å—ñ –∑–µ—Ä–Ω–∞ –Ω–∞ —à–ª—è—Ö—É
‚Ä¢ –¢—Ä–µ–Ω—É–π—Å—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

–£–¥–∞—á—ñ –≤ –≥—Ä—ñ! üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            help_text,
            reply_markup=reply_markup
        )
    
    async def back_to_main(self, query):
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        user = query.from_user
        
        welcome_message = f"""
ü§ñ‚òï –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Perky Coffee Jump!

–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã

–¶–µ –∑–∞—Ö–æ–ø–ª—é—é—á–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä-–≥—Ä–∞, –¥–µ —Ç–∏ –≥—Ä–∞—î—à –∑–∞ –∫–∞–≤–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞, —è–∫–∏–π –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø—ñ–¥—Å—Ç—Ä–∏–±–Ω—É—Ç–∏ —è–∫–æ–º–æ–≥–∞ –≤–∏—â–µ, –∑–±–∏—Ä–∞—é—á–∏ –∫–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞!

–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game"))],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop')],
            [InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            welcome_message,
            reply_markup=reply_markup
        )

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
perky_bot = PerkyCoffeeBot()

# FastAPI —Ä–æ—É—Ç–∏
@app.get("/game", response_class=HTMLResponse)
async def get_game():
    """–ü–æ–≤–µ—Ä—Ç–∞—î HTML –≥—Ä—É"""
    # –í–∞—à HTML –∫–æ–¥ –≥—Ä–∏ —Ç—É—Ç - —è –∑–±–µ—Ä–µ–∂—É –π–æ–≥–æ —è–∫ —î, –∞–ª–µ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏
    html_content = """
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ü§ñ‚òï Perky Coffee Jump</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            overflow: hidden;
            height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            user-select: none;
            -webkit-user-select: none;
            -webkit-touch-callout: none;
        }

        .game-container {
            position: relative;
            width: 100%;
            max-width: 400px;
            height: 100vh;
            background: linear-gradient(180deg, #87CEEB 0%, #98FB98 100%);
            border-radius: 0;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            touch-action: none;
        }

        canvas {
            display: block;
            width: 100%;
            height: 100%;
        }

        .ui-panel {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            color: #fff;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        }

        .ui-panel .item {
            display: flex;
            align-items: center;
        }

        .ui-panel .icon {
            margin-right: 5px;
            font-size: 1.5em;
        }

        .end-game-screen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.7);
            color: #fff;
            padding: 20px 40px;
            border-radius: 15px;
            text-align: center;
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 100;
        }
        
        .end-game-screen h2 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .end-game-screen p {
            font-size: 1.2em;
            margin-bottom: 20px;
        }

        .end-game-screen button {
            background: #fff;
            color: #4b0082;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: background 0.3s;
        }
        .end-game-screen button:hover {
            background: #e0e0e0;
        }
        .buttons-container {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }
        .achievement-notification {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: #fff;
            padding: 10px 20px;
            border-radius: 10px;
            text-align: center;
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
            pointer-events: none;
            z-index: 200;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <canvas id="gameCanvas"></canvas>
        <div class="ui-panel">
            <div class="item">
                <span class="icon">üìè –í–∏—Å–æ—Ç–∞:</span>
                <span id="scoreDisplay">0 –º</span>
            </div>
            <div class="item">
                <span class="icon">‚òï</span>
                <span id="beansDisplay">0</span>
            </div>
        </div>
        <div class="end-game-screen" id="endGameScreen">
            <h2 id="finalScore">–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h2>
            <p id="highScore">–ù–æ–≤–∏–π —Ä–µ–∫–æ—Ä–¥: 0 –º</p>
            <p id="totalBeans">–ó—ñ–±—Ä–∞–Ω–æ –∑–µ—Ä–µ–Ω: 0</p>
            <div class="buttons-container">
                <button id="restartButton">–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑</button>
                <button id="mainMenuButton">–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</button>
            </div>
        </div>
    </div>
    <div class="achievement-notification" id="achievementNotification"></div>

    <script>
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram WebApp
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand();
        
        // Game variables
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('scoreDisplay');
        const beansDisplay = document.getElementById('beansDisplay');
        const endGameScreen = document.getElementById('endGameScreen');
        const finalScoreDisplay = document.getElementById('finalScore');
        const highScoreDisplay = document.getElementById('highScore');
        const totalBeansDisplay = document.getElementById('totalBeans');
        const restartButton = document.getElementById('restartButton');
        const mainMenuButton = document.getElementById('mainMenuButton');
        const achievementNotification = document.getElementById('achievementNotification');

        let player;
        let platforms;
        let gameScore;
        let beans;
        let lastPlatformY;
        let isGameOver;
        let keys = {};
        let touchStart = null;
        let touchEnd = null;
        let maxJumpHeight = 150;
        let beanSpawnRate = 0.5;
        let playerWidth = 40;
        let playerHeight = 40;
        let platformWidth = 80;
        let platformHeight = 10;
        let gameDifficulty = 1;
        let vibrationEnabled = true;

        let gameStats = {
            highScore: 0,
            totalBeans: 0
        };

        // Player class
        class Player {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.width = playerWidth;
                this.height = playerHeight;
                this.dy = 0;
                this.onGround = false;
                this.isJumping = false;
            }

            draw() {
                // –ù–∞–º–∞–ª—é–≤–∞—Ç–∏ –∫–∞–≤–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞
                ctx.fillStyle = '#8B4513';
                ctx.fillRect(this.x, this.y, this.width, this.height);
                
                // –û—á—ñ —Ä–æ–±–æ—Ç–∞
                ctx.fillStyle = '#FFD700';
                ctx.fillRect(this.x + 8, this.y + 8, 8, 8);
                ctx.fillRect(this.x + 24, this.y + 8, 8, 8);
                
                // –ü–æ—Å–º—ñ—à–∫–∞
                ctx.fillStyle = '#FFD700';
                ctx.fillRect(this.x + 12, this.y + 24, 16, 4);
            }

            update() {
                this.y += this.dy;

                if (!this.onGround) {
                    this.dy += 0.5; // Gravity
                }

                if (this.y + this.height > canvas.height) {
                    this.y = canvas.height - this.height;
                    this.onGround = true;
                    this.isJumping = false;
                    this.dy = 0;
                }
            }

            jump() {
                if (this.onGround) {
                    this.dy = -15;
                    this.onGround = false;
                    this.isJumping = true;
                    vibrate([50]);
                }
            }
        }

        // Platform class
        class Platform {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.width = platformWidth;
                this.height = platformHeight;
            }

            draw() {
                ctx.fillStyle = '#A0522D';
                ctx.fillRect(this.x, this.y, this.width, this.height);
                
                // –î–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç—É—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
                ctx.fillStyle = '#8B4513';
                ctx.fillRect(this.x + 2, this.y + 2, this.width - 4, this.height - 4);
            }
        }

        // Bean class
        class Bean {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.size = 10;
                this.collected = false;
            }

            draw() {
                if (!this.collected) {
                    // –ö–∞–≤–æ–≤–µ –∑–µ—Ä–Ω–æ
                    ctx.fillStyle = '#4B0082';
                    ctx.beginPath();
                    ctx.ellipse(this.x, this.y, this.size, this.size * 0.8, 0, 0, Math.PI * 2);
                    ctx.fill();
                    
                    // –ë–ª–∏–∫ –Ω–∞ –∑–µ—Ä–Ω—ñ
                    ctx.fillStyle = '#8A2BE2';
                    ctx.beginPath();
                    ctx.ellipse(this.x - 3, this.y - 3, this.size * 0.3, this.size * 0.2, 0, 0, Math.PI * 2);
                    ctx.fill();
                }
            }
        }

        // Initialize game
        function init() {
            resizeCanvas();
            player = new Player(canvas.width / 2 - playerWidth / 2, canvas.height - playerHeight);
            platforms = [];
            beans = [];
            gameScore = 0;
            lastPlatformY = canvas.height - 100;
            isGameOver = false;

            // Generate initial platforms
            for (let i = 0; i < 10; i++) {
                let x = Math.random() * (canvas.width - platformWidth);
                let y = lastPlatformY - i * 80;
                platforms.push(new Platform(x, y));
                
                // Spawn beans
                if (Math.random() < beanSpawnRate) {
                    beans.push(new Bean(x + platformWidth / 2, y - 20));
                }
            }
            
            loadStats();
        }

        function resizeCanvas() {
            const container = document.querySelector('.game-container');
            canvas.width = container.clientWidth;
            canvas.height = container.clientHeight;
        }

        // Handle game over
        function gameOver() {
            isGameOver = true;
            endGameScreen.style.display = 'flex';
            
            const finalScore = Math.floor(gameScore / 10);
            finalScoreDisplay.textContent = `–¢–∏ –ø—Ä–æ–ª–µ—Ç—ñ–≤: ${finalScore} –º`;
            totalBeansDisplay.textContent = `–ó—ñ–±—Ä–∞–Ω–æ –∑–µ—Ä–µ–Ω: ${gameStats.totalBeans}`;
            
            if (finalScore > gameStats.highScore) {
                gameStats.highScore = finalScore;
                highScoreDisplay.textContent = `–ù–æ–≤–∏–π —Ä–µ–∫–æ—Ä–¥: ${gameStats.highScore} –º`;
                highScoreDisplay.style.color = 'gold';
                showAchievementNotification('üèÖ –ù–æ–≤–∏–π —Ä–µ–∫–æ—Ä–¥!');
                vibrate([200, 100, 200]);
            } else {
                highScoreDisplay.textContent = `–†–µ–∫–æ—Ä–¥: ${gameStats.highScore} –º`;
                highScoreDisplay.style.color = '#fff';
            }

            // –ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
            saveGameStats(finalScore, gameStats.totalBeans);
            saveStats();
        }

        // Game loop
        function update() {
            if (isGameOver) return;

            player.update();

            // Check for collision with platforms
            platforms.forEach(platform => {
                if (player.dy > 0 && 
                    player.x + player.width > platform.x &&
                    player.x < platform.x + platform.width &&
                    player.y + player.height > platform.y &&
                    player.y + player.height < platform.y + platform.height + 10) {
                    
                    player.y = platform.y - player.height;
                    player.onGround = true;
                    player.isJumping = false;
                    player.dy = 0;
                }
            });

            // Handle player input
            if (keys['ArrowUp'] || keys['w'] || keys[' '] || (touchEnd && touchEnd.y < touchStart.y - 20)) {
                player.jump();
                touchStart = null;
                touchEnd = null;
            } else if (keys['ArrowLeft'] || keys['a']) {
                player.x -= 5;
            } else if (keys['ArrowRight'] || keys['d']) {
                player.x += 5;
            }

            // Keep player within canvas bounds
            if (player.x < 0) player.x = 0;
            if (player.x + player.width > canvas.width) player.x = canvas.width - player.width;

            // Update platforms and generate new ones
            if (player.dy < 0) {
                platforms.forEach(platform => {
                    platform.y -= player.dy;
                });
                beans.forEach(bean => {
                    bean.y -= player.dy;
                });
                gameScore += Math.abs(player.dy);
            }
            
            platforms = platforms.filter(platform => platform.y < canvas.height);
            beans = beans.filter(bean => bean.y < canvas.height);
            
            while (platforms.length < 10) {
                let x = Math.random() * (canvas.width - platformWidth);
                let y = platforms[platforms.length - 1].y - 80;
                platforms.push(new Platform(x, y));
                
                // Spawn beans
                if (Math.random() < beanSpawnRate) {
                    beans.push(new Bean(x + platformWidth / 2, y - 20));
                }
            }

            // Check for bean collection
            beans.forEach((bean, index) => {
                if (!bean.collected &&
                    player.x < bean.x + bean.size &&
                    player.x + player.width > bean.x - bean.size &&
                    player.y < bean.y + bean.size &&
                    player.y + player.height > bean.y - bean.size) {
                    
                    bean.collected = true;
                    gameStats.totalBeans++;
                    beans.splice(index, 1);
                    vibrate([30]);
                    
                    // Achievement notifications
                    if (gameStats.totalBeans % 10 === 0) {
                        showAchievementNotification(`‚òï ${gameStats.totalBeans} –∑–µ—Ä–µ–Ω –∑—ñ–±—Ä–∞–Ω–æ!`);
                    }
                }
            });

            // Update UI
            scoreDisplay.textContent = Math.floor(gameScore / 10) + ' –º';
            beansDisplay.textContent = gameStats.totalBeans;

            // Check if player falls off the bottom
            if (player.y > canvas.height) {
                gameOver();
            }
        }

        // Draw everything
        function draw() {
            // Clear canvas with gradient background
            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
            gradient.addColorStop(0, '#87CEEB');
            gradient.addColorStop(1, '#98FB98');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw clouds
            drawClouds();
            
            platforms.forEach(platform => platform.draw());
            beans.forEach(bean => bean.draw());
            player.draw();
        }

        function drawClouds() {
            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
            
            // Static clouds for background
            const cloudY = (gameScore / 20) % canvas.height;
            
            // Cloud 1
            ctx.beginPath();
            ctx.arc(50, cloudY, 20, 0, Math.PI * 2);
            ctx.arc(70, cloudY, 25, 0, Math.PI * 2);
            ctx.arc(90, cloudY, 20, 0, Math.PI * 2);
            ctx.fill();
            
            // Cloud 2
            ctx.beginPath();
            ctx.arc(canvas.width - 80, cloudY + 100, 18, 0, Math.PI * 2);
            ctx.arc(canvas.width - 65, cloudY + 100, 22, 0, Math.PI * 2);
            ctx.arc(canvas.width - 50, cloudY + 100, 18, 0, Math.PI * 2);
            ctx.fill();
        }

        function gameLoop() {
            update();
            draw();
            requestAnimationFrame(gameLoop);
        }

        // Event listeners
        window.addEventListener('keydown', (e) => {
            keys[e.key] = true;
            e.preventDefault();
        });

        window.addEventListener('keyup', (e) => {
            keys[e.key] = false;
        });

        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            const touch = e.touches[0];
            const rect = canvas.getBoundingClientRect();
            touchStart = { 
                x: touch.clientX - rect.left, 
                y: touch.clientY - rect.top 
            };
        });

        canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            const touch = e.changedTouches[0];
            const rect = canvas.getBoundingClientRect();
            touchEnd = { 
                x: touch.clientX - rect.left, 
                y: touch.clientY - rect.top 
            };
        });

        canvas.addEventListener('click', (e) => {
            e.preventDefault();
            player.jump();
        });

        // Buttons
        restartButton.addEventListener('click', () => {
            endGameScreen.style.display = 'none';
            init();
        });

        mainMenuButton.addEventListener('click', () => {
            window.Telegram.WebApp.close();
        });

        // Utility functions
        function saveStats() {
            localStorage.setItem('perkyCoffeeStats', JSON.stringify(gameStats));
        }

        function loadStats() {
            const savedStats = localStorage.getItem('perkyCoffeeStats');
            if (savedStats) {
                const parsed = JSON.parse(savedStats);
                gameStats.highScore = parsed.highScore || 0;
                // Don't load totalBeans from localStorage as it's managed by server
            }
        }

        function showAchievementNotification(message) {
            achievementNotification.textContent = message;
            achievementNotification.style.opacity = 1;
            setTimeout(() => {
                achievementNotification.style.opacity = 0;
            }, 3000);
        }

        function vibrate(pattern) {
            if (vibrationEnabled && navigator.vibrate) {
                navigator.vibrate(pattern);
            }
        }

        /**
         * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
         */
        function saveGameStats(score, collected_beans) {
            if (!window.Telegram.WebApp.initDataUnsafe || !window.Telegram.WebApp.initDataUnsafe.user) {
                console.error('Telegram WebApp user data not available');
                return;
            }
            
            const user_id = window.Telegram.WebApp.initDataUnsafe.user.id;
            
            fetch('/save_stats', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    user_id: user_id,
                    score: Math.floor(score),
                    collected_beans: collected_beans
                })
            })
            .then(response => response.json())
            .then(data => {
                console.log('Stats saved successfully:', data);
            })
            .catch(error => {
                console.error('Error saving stats:', error);
            });
        }

        // Resize handler
        window.addEventListener('resize', () => {
            resizeCanvas();
        });

        // Initialize and start game
        init();
        gameLoop();
    </script>
</body>
</html>
    """
    
    return HTMLResponse(content=html_content)

@app.post("/save_stats")
async def save_game_stats(stats: GameStats):
    """API endpoint –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∏"""
    try:
        db.save_game_result(stats.user_id, stats.score, stats.collected_beans)
        return {"success": True, "message": "Stats saved successfully"}
    except Exception as e:
        logger.error(f"Error saving game stats: {e}")
        raise HTTPException(status_code=500, detail="Failed to save stats")

@app.get("/stats/{user_id}")
async def get_user_stats(user_id: int):
    """API endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        stats = db.get_user_stats(user_id)
        if stats:
            return stats
        else:
            return {"error": "User not found"}
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        raise HTTPException(status_code=500, detail="Failed to get stats")

@app.get("/leaderboard")
async def get_leaderboard():
    """API endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤"""
    try:
        leaderboard = db.get_leaderboard()
        return {"leaderboard": leaderboard}
    except Exception as e:
        logger.error(f"Error getting leaderboard: {e}")
        raise HTTPException(status_code=500, detail="Failed to get leaderboard")

@app.post(f"/{BOT_TOKEN}")
async def telegram_webhook(request: Request):
    """Webhook –¥–ª—è Telegram –±–æ—Ç–∞"""
    try:
        json_data = await request.json()
        update = Update.de_json(json_data, perky_bot.application.bot)
        await perky_bot.application.process_update(update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return {"status": "error"}

async def setup_bot():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –±–æ—Ç–∞"""
    perky_bot.application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    perky_bot.application.add_handler(CommandHandler("start", perky_bot.start))
    perky_bot.application.add_handler(CallbackQueryHandler(perky_bot.button_callback))
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ webhook
    webhook_url = f"{WEBAPP_URL}/{BOT_TOKEN}"
    await perky_bot.application.bot.set_webhook(webhook_url)
    
    logger.info(f"Webhook set to: {webhook_url}")

@app.on_event("startup")
async def startup_event():
    """–ü–æ–¥—ñ—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("Starting Perky Coffee Jump Bot...")
    await setup_bot()
    logger.info("Bot setup completed!")

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=PORT)
