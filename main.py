import os
import json
import logging
from datetime import datetime
from typing import Dict, Optional

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
import asyncio
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
import uvicorn
from pydantic import BaseModel

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL')
PORT = int(os.getenv('PORT', 8000))

if not BOT_TOKEN:
    logger.error("BOT_TOKEN is not set!")
    exit(1)
if not WEBAPP_URL:
    logger.error("WEBAPP_URL is not set!")
    exit(1)

# FastAPI –¥–æ–¥–∞—Ç–æ–∫
app = FastAPI(title="Perky Coffee Jump WebApp")

# Pydantic –º–æ–¥–µ–ª—ñ –¥–ª—è API
class GameStats(BaseModel):
    user_id: int
    score: int
    collected_beans: int
    achievements: Optional[str] = None

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
def get_db_connection():
    conn = sqlite3.connect('perky_game.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS stats (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                high_score INTEGER NOT NULL,
                total_beans INTEGER NOT NULL,
                games_played INTEGER NOT NULL,
                achievements TEXT
            )
        """)
        conn.commit()
    logger.info("Database initialized.")

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –±–æ—Ç–∞
class PerkyBot:
    def __init__(self):
        self.application: Optional[Application] = None

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
        user = update.effective_user
        welcome_message = (
            f"–ü—Ä–∏–≤—ñ—Ç, {user.full_name}! üëã\n\n"
            "–Ø - **Perky Coffee Jump Bot**! ü§ñ‚òï\n\n"
            "–ú–æ—è –º–µ—Ç–∞ - –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ —Å—Ç—Ä–∏–±–∞—Ç–∏, –∑–±–∏—Ä–∞—Ç–∏ –∫–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞ —Ç–∞ –±–∏—Ç–∏ —Ä–µ–∫–æ—Ä–¥–∏!\n"
            "–ì–æ—Ç–æ–≤–∏–π –¥–æ –≥—Ä–∏? –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ! üëá"
        )
        keyboard = [
            [InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=WEBAPP_URL))],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
                InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤", callback_data='leaderboard')
            ],
            [
                InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop'),
                InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT OR IGNORE INTO stats (user_id, username, high_score, total_beans, games_played, achievements) VALUES (?, ?, 0, 0, 0, '{}')", (user.id, user.username))
            conn.commit()

        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        logger.info(f"User {user.id} started the bot.")

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()

        if query.data == 'stats':
            await self.show_stats(user_id, context)
        elif query.data == 'leaderboard':
            await self.show_leaderboard(context)
        elif query.data == 'shop':
            await self.show_shop(context)
        elif query.data == 'help':
            await self.show_help(context)

    async def show_stats(self, user_id, context):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM stats WHERE user_id = ?", (user_id,))
            user_stats = cursor.fetchone()

        if not user_stats:
            await context.bot.send_message(user_id, "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —â–µ –Ω–µ –±—É–ª–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑—ñ–≥—Ä–∞—Ç–∏ –≤ –≥—Ä—É!")
            return

        message = (
            f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"üèÜ –†–µ–∫–æ—Ä–¥: **{user_stats['high_score']}** –æ—á–æ–∫\n"
            f"‚òï –ó—ñ–±—Ä–∞–Ω–æ –∑–µ—Ä–µ–Ω: **{user_stats['total_beans']}**\n"
            f"üïπÔ∏è –ó—ñ–≥—Ä–∞–Ω–æ —ñ–≥–æ—Ä: **{user_stats['games_played']}**\n"
        )
        await context.bot.send_message(user_id, message, parse_mode=ParseMode.MARKDOWN)

    async def show_leaderboard(self, context):
        """–ü–æ–∫–∞–∑—É—î —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤"""
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT username, high_score FROM stats ORDER BY high_score DESC LIMIT 10")
            leaderboard_data = cursor.fetchall()
        
        message = "üèÜ **–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤:**\n\n"
        for i, row in enumerate(leaderboard_data):
            message += f"**{i+1}.** {row['username']} - **{row['high_score']}** –æ—á–æ–∫\n"
        
        await context.bot.send_message(context.effective_user.id, message, parse_mode=ParseMode.MARKDOWN)

    async def show_shop(self, context):
        """–ü–æ–∫–∞–∑—É—î –º–∞–≥–∞–∑–∏–Ω –º–µ—Ä—á—É"""
        message = "üõí **–ú–∞–≥–∞–∑–∏–Ω –º–µ—Ä—á—É:**\n\n" \
                  "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏ –∫—Ä—É—Ç–∏–π –º–µ—Ä—á –∑ Perky Coffee Jump!\n" \
                  "**(–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —É —Ä–æ–∑—Ä–æ–±—Ü—ñ)**"
        await context.bot.send_message(context.effective_user.id, message, parse_mode=ParseMode.MARKDOWN)

    async def show_help(self, context):
        """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –≥—Ä–∏"""
        message = "‚ùì **–î–æ–ø–æ–º–æ–≥–∞:**\n\n" \
                  "–£ –≥—Ä—ñ Perky Coffee Jump –≤–∞—à–∞ –º–µ—Ç–∞ - –∫–µ—Ä—É–≤–∞—Ç–∏ –∫–∞–≤–æ–≤–∏–º —Ä–æ–±–æ—Ç–æ–º, —â–æ–± —Å—Ç—Ä–∏–±–∞—Ç–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö —ñ –∑–±–∏—Ä–∞—Ç–∏ –∫–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞. –ß–∏–º –±—ñ–ª—å—à–µ –∑–µ—Ä–µ–Ω - —Ç–∏–º –≤–∏—â–∏–π –≤–∞—à —Ä–∞—Ö—É–Ω–æ–∫! –£–Ω–∏–∫–∞–π—Ç–µ –ø–∞–¥—ñ–Ω–Ω—è!\n\n" \
                  "**–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:**\n" \
                  "–ù–∞—Ç–∏—Å–∫–∞–π—Ç–µ –Ω–∞ –µ–∫—Ä–∞–Ω, —â–æ–± —Å—Ç—Ä–∏–±–∞—Ç–∏.\n\n" \
                  "**–ü—ñ–¥–∫–∞–∑–∫–∞:** –ß–∏–º –¥–æ–≤—à–µ —É—Ç—Ä–∏–º—É—î—Ç–µ –ø–∞–ª–µ—Ü—å, —Ç–∏–º –≤–∏—â–∏–π —Å—Ç—Ä–∏–±–æ–∫!"
        await context.bot.send_message(context.effective_user.id, message, parse_mode=ParseMode.MARKDOWN)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª–∞—Å—É –±–æ—Ç–∞
perky_bot = PerkyBot()

# API endpoints
@app.get("/game", response_class=HTMLResponse)
async def get_game():
    """–ü–æ–¥–∞—î HTML-—Ñ–∞–π–ª –≥—Ä–∏"""
    try:
        with open("game.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Game file not found")

@app.post("/save_stats")
async def save_stats_endpoint(stats: GameStats):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∏"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT high_score, total_beans, games_played FROM stats WHERE user_id = ?", (stats.user_id,))
            current_stats = cursor.fetchone()
            
            if current_stats:
                new_high_score = max(current_stats['high_score'], stats.score)
                new_total_beans = current_stats['total_beans'] + stats.collected_beans
                new_games_played = current_stats['games_played'] + 1
                
                cursor.execute("""
                    UPDATE stats
                    SET high_score = ?, total_beans = ?, games_played = ?
                    WHERE user_id = ?
                """, (new_high_score, new_total_beans, new_games_played, stats.user_id))
            else:
                cursor.execute("""
                    INSERT INTO stats (user_id, high_score, total_beans, games_played, achievements)
                    VALUES (?, ?, ?, ?, '{}')
                """, (stats.user_id, stats.score, stats.collected_beans, 1))

            conn.commit()
            logger.info(f"Stats saved for user {stats.user_id}: score={stats.score}, beans={stats.collected_beans}")
            return {"message": "Stats saved successfully"}
    except Exception as e:
        logger.error(f"Error saving stats: {e}")
        raise HTTPException(status_code=500, detail="Failed to save stats")

@app.get("/stats/{user_id}")
async def get_user_stats(user_id: int):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT high_score, total_beans, games_played FROM stats WHERE user_id = ?", (user_id,))
            user_stats = cursor.fetchone()
            if user_stats:
                return dict(user_stats)
            else:
                raise HTTPException(status_code=404, detail="User stats not found")
    except Exception as e:
        logger.error(f"Error getting user stats: {e}")
        raise HTTPException(status_code=500, detail="Failed to get user stats")

@app.get("/leaderboard")
async def get_leaderboard_endpoint():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT username, high_score FROM stats ORDER BY high_score DESC LIMIT 10")
            leaderboard = [dict(row) for row in cursor.fetchall()]
        return {"leaderboard": leaderboard}
    except Exception as e:
        logger.error(f"Error getting leaderboard: {e}")
        raise HTTPException(status_code=500, detail="Failed to get leaderboard")

# –ó–º—ñ–Ω–µ–Ω–∏–π –≤–µ–±—Ö—É–∫-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ Application
@app.post(f"/{BOT_TOKEN}")
async def telegram_webhook(request: Request):
    """Webhook –¥–ª—è Telegram –±–æ—Ç–∞"""
    try:
        # –í–∞–∂–ª–∏–≤–æ: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ Application –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
        if not perky_bot.application:
            logger.warning("Webhook received, but bot not initialized yet. Returning 503.")
            return {"status": "bot not initialized yet"}, 503
        
        json_data = await request.json()
        update = Update.de_json(json_data, perky_bot.application.bot)
        
        # –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Application
        async with perky_bot.application:
            await perky_bot.application.process_update(update)

        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return {"status": "error"}

async def setup_bot():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –±–æ—Ç–∞"""
    try:
        perky_bot.application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        perky_bot.application.add_handler(CommandHandler("start", perky_bot.start))
        perky_bot.application.add_handler(CallbackQueryHandler(perky_bot.button_callback))
        perky_bot.application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, perky_bot.web_app_data))
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ webhook
        webhook_url = f"{WEBAPP_URL}/{BOT_TOKEN}"
        await perky_bot.application.bot.set_webhook(webhook_url)
        
        logger.info(f"Webhook set to: {webhook_url}")
    except Exception as e:
        logger.error(f"Error during bot setup: {e}")
        raise

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –¥–∞–Ω–∏—Ö –∑ WebApp
async def web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö, –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –∑ WebApp"""
    data = json.loads(update.effective_message.web_app_data.data)
    user_id = update.effective_user.id
    score = data.get('score', 0)
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –±–∞–∑—É
    # –£ —Ü—å–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ —è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—é —Ç–≤—ñ–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç,
    # –∞–ª–µ –º–æ–∂–Ω–∞ –±—É–ª–æ –± –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ø—Ä—è–º—É –≤ –ë–î
    stats = GameStats(user_id=user_id, score=score, collected_beans=0)
    await save_stats_endpoint(stats)
    
    message = f"üéâ –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Ä–∞—Ö—É–Ω–æ–∫: **{score}** –æ—á–æ–∫."
    await context.bot.send_message(user_id, message, parse_mode=ParseMode.MARKDOWN)
    logger.info(f"Received game data from user {user_id}: score={score}")

# –î–æ–¥–∞—î–º–æ —Ü–µ–π –º–µ—Ç–æ–¥ –¥–æ –∫–ª–∞—Å—É PerkyBot
PerkyBot.web_app_data = web_app_data

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —ñ –≤–µ–±—Ö—É–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–∞—Ä—Ç—É FastAPI
@app.on_event("startup")
async def startup_event():
    """–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É FastAPI"""
    logger.info("Initializing database...")
    init_db()
    logger.info("Starting Perky Coffee Jump Bot...")
    await setup_bot()
    logger.info("Bot setup completed!")
    
# –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PORT)
