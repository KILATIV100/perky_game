import logging
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode
from telegram.error import RetryAfter

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Ç–∞ –±–∞–∑—É –¥–∞–Ω–∏—Ö
from config import BOT_TOKEN, WEBAPP_URL
from database import db

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# --- –î–ê–ù–Ü –ú–ê–ì–ê–ó–ò–ù–£ –¢–ê –ö–û–ù–¢–ê–ö–¢–ò ---
CONTACT_PHONE = "+380 (95) 394 19 00"
CAFE_MENU_URL = "https://menu.ps.me/ZK6-i-cBzeg" # <--- –í–ê–ñ–õ–ò–í–û: –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è

COFFEE_ITEMS = [
    {"id": "coffee_1", "name": "Arabica Ethiopia Yirgacheffe", "price": "250 –≥—Ä–Ω", "desc": "–í–∏—à—É–∫–∞–Ω–∏–π –ª–æ—Ç –∑ –∫–≤—ñ—Ç–∫–æ–≤–∏–º–∏ –Ω–æ—Ç–∞–º–∏ —Ç–∞ —è—Å–∫—Ä–∞–≤–æ—é –∫–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—é."},
    {"id": "coffee_2", "name": "Robusta India Cherry", "price": "180 –≥—Ä–Ω", "desc": "–ú—ñ—Ü–Ω–∏–π —Ç–∞ –Ω–∞—Å–∏—á–µ–Ω–∏–π, —ñ–¥–µ–∞–ª—å–Ω–∏–π –¥–ª—è –µ—Å–ø—Ä–µ—Å–æ, –∑ –Ω–æ—Ç–∞–º–∏ —à–æ–∫–æ–ª–∞–¥—É."},
]

MERCH_ITEMS = [
    {"id": "merch_1", "name": "–ë—Ä–µ–Ω–¥–æ–≤–∞–Ω–∞ —á–∞—à–∫–∞ (350 –º–ª)", "price": "199 –≥—Ä–Ω", "desc": "–°—Ç–∏–ª—å–Ω–∞ –∫–µ—Ä–∞–º—ñ—á–Ω–∞ —á–∞—à–∫–∞ –∑ –ª–æ–≥–æ—Ç–∏–ø–æ–º Perky Robot."},
    {"id": "merch_2", "name": "–§—É—Ç–±–æ–ª–∫–∞ 'Coffee Jumper'", "price": "450 –≥—Ä–Ω", "desc": "–ë–∞–≤–æ–≤–Ω—è–Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ –≤–∏—Å–æ–∫–æ—ó —è–∫–æ—Å—Ç—ñ –∑ –ø—Ä–∏–Ω—Ç–æ–º Perky Robot."},
]

class PerkyCoffeeBot:
    """
    –ö–ª–∞—Å, —â–æ —ñ–Ω–∫–∞–ø—Å—É–ª—é—î –≤—Å—é –ª–æ–≥—ñ–∫—É Telegram-–±–æ—Ç–∞.
    """
    def __init__(self):
        self.application = None
        self.webhook_url = f"{WEBAPP_URL}/{BOT_TOKEN}"

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start."""
        user = update.effective_user
        db.save_or_update_user(user.id, user.username, user.first_name)
        
        welcome_message = (
            f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã\n\n"
            "–Ø - <b>Perky Coffee Jump Bot</b>! ü§ñ‚òï\n\n"
            "–ì–æ—Ç–æ–≤–∏–π –¥–æ –≥—Ä–∏? –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ! üëá"
        )
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game"))],
            [
                InlineKeyboardButton("‚òï –ú–µ–Ω—é –∫–∞–≤'—è—Ä–Ω—ñ", url=CAFE_MENU_URL),
            ],
            [
                InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop'),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
            ],
            [
                InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data='leaderboard'),
                InlineKeyboardButton("‚ùì –ü—Ä–∞–≤–∏–ª–∞", callback_data='help')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_html(welcome_message, reply_markup=reply_markup)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        await query.answer()

        action = query.data
        
        if action == 'stats':
            await self.show_stats(query)
        elif action == 'leaderboard':
            await self.show_leaderboard(query)
        elif action == 'shop':
            await self.show_shop(query)
        elif action == 'help':
            await self.show_help(query)
        elif action == 'back_main':
            await self.back_to_main(query)
        elif action.startswith('shop_cat_'):
            category = action.split('_')[-1]
            await self.show_shop_category(query, category)
        elif action.startswith('shop_item_'):
            item_id = action.split('_', 2)[-1]
            await self.show_shop_item(query, item_id)

    async def show_stats(self, query: Update):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        user_id = query.from_user.id
        stats = db.get_user_stats(user_id)
        
        if not stats or stats['games_played'] == 0:
            stats_text = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n–í–∏ —â–µ –Ω–µ –∑—ñ–≥—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –≥—Ä–∏. –ß–∞—Å –ø–æ—á–∞—Ç–∏!"
        else:
            stats_text = (
                f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                f"üèÜ <b>–†–µ–∫–æ—Ä–¥ –≤–∏—Å–æ—Ç–∏:</b> {stats['max_height']} –º\n"
                f"‚òï <b>–í—Å—å–æ–≥–æ –∑–µ—Ä–µ–Ω:</b> {stats['total_beans']}\n"
                f"üïπÔ∏è <b>–ó—ñ–≥—Ä–∞–Ω–æ —ñ–≥–æ—Ä:</b> {stats['games_played']}"
            )

        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(stats_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

    async def show_leaderboard(self, query: Update):
        """–ü–æ–∫–∞–∑—É—î —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤."""
        leaderboard = db.get_leaderboard()
        
        if not leaderboard:
            leaderboard_text = "üèÜ <b>–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤:</b>\n\n–ü–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—å–æ. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä—à–∏–º!"
        else:
            leaderboard_text = "üèÜ <b>–¢–æ–ø-10 –≥—Ä–∞–≤—Ü—ñ–≤:</b>\n\n"
            emojis = ["ü•á", "ü•à", "ü•â"]
            for i, user in enumerate(leaderboard):
                name = user.get('username') or user.get('first_name') or "–ì—Ä–∞–≤–µ—Ü—å"
                max_height = user.get('max_height', 0)
                emoji = emojis[i] if i < 3 else f"<b>{i+1}.</b>"
                leaderboard_text += f"{emoji} {name} - {max_height} –º\n"

        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(leaderboard_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        
    async def show_shop(self, query: Update):
        """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω—É."""
        shop_text = "üõí <b>–ú–∞–≥–∞–∑–∏–Ω Perky Coffee:</b>\n\n–û–±–µ—Ä—ñ—Ç—å, —â–æ –±–∞–∂–∞—î—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏:"
        
        keyboard = [
            [
                InlineKeyboardButton("‚òï –ö–∞–≤–∞ –≤ –∑–µ—Ä–Ω–∞—Ö", callback_data='shop_cat_coffee'),
                InlineKeyboardButton("üëï –ú–µ—Ä—á —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏", callback_data='shop_cat_merch')
            ],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(shop_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

    async def show_shop_category(self, query: Update, category: str):
        """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —É –≤–∏–±—Ä–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó."""
        items = COFFEE_ITEMS if category == 'coffee' else MERCH_ITEMS
        title = "‚òï –ö–∞–≤–∞ –≤ –∑–µ—Ä–Ω–∞—Ö" if category == 'coffee' else "üëï –ú–µ—Ä—á —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏"
        
        shop_text = f"<b>{title}:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å—É:"
        
        keyboard = []
        for item in items:
            keyboard.append([InlineKeyboardButton(f"{item['name']} ({item['price']})", callback_data=f"shop_item_{item['id']}")])
            
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", callback_data='shop')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(shop_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        
    async def show_shop_item(self, query: Update, item_id: str):
        """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É."""
        item = next((i for i in COFFEE_ITEMS + MERCH_ITEMS if i['id'] == item_id), None)
        
        if not item:
            await query.edit_message_text("–ü–æ–∑–∏—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", callback_data='shop')]]))
            return

        item_category = 'coffee' if item in COFFEE_ITEMS else 'merch'
        
        item_text = (
            f"<b>{item['name']}</b>\n\n"
            f"üí∞ <b>–¶—ñ–Ω–∞:</b> {item['price']}\n\n"
            f"üìù <b>–û–ø–∏—Å:</b> {item['desc']}\n\n"
            f"üìû –î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ: <b>{CONTACT_PHONE}</b>"
        )
        
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data=f"shop_cat_{item_category}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(item_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


    async def show_help(self, query: Update):
        """–ü–æ–∫–∞–∑—É—î –æ–ø–∏—Å –≥—Ä–∏ —Ç–∞ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤."""
        help_text = (
            "‚ùì <b>–ü—Ä–∞–≤–∏–ª–∞ —Ç–∞ –ë–æ–Ω—É—Å–∏:</b>\n\n"
            "–ö–µ—Ä—É–π—Ç–µ –∫–∞–≤–æ–≤–∏–º —Ä–æ–±–æ—Ç–æ–º, —Å—Ç—Ä–∏–±–∞–π—Ç–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö —ñ –∑–±–∏—Ä–∞–π—Ç–µ –∫–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞ (‚òï) –Ω–∞ —à–ª—è—Ö—É –¥–æ –Ω–∞–π–≤–∏—â–æ–≥–æ —Ä–µ–∫–æ—Ä–¥—É.\n\n"
            "<b>üéØ –û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞:</b>\n"
            "1. –°—Ç—Ä–∏–±–∞–π—Ç–µ —è–∫–æ–º–æ–≥–∞ –≤–∏—â–µ, —É–Ω–∏–∫–∞—é—á–∏ –ø–∞–¥—ñ–Ω–Ω—è —Ç–∞ –≤–æ—Ä–æ–≥—ñ–≤.\n"
            "2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≥—ñ—Ä–æ—Å–∫–æ–ø –∞–±–æ –µ–∫—Ä–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è.\n"
            "3. –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç–∞—î –ø—ñ—Å–ª—è 200–º —ñ 500–º.\n\n"
            "üéÅ <b>–Ø–∫ –≤–∏–≥—Ä–∞—Ç–∏ –±–æ–Ω—É—Å–∏:</b>\n"
            "–ó–Ω–∏–∂–∫–∏ —Ç–∞ –ø—Ä–∏–∑–∏ –≤–∏–¥–∞—é—Ç—å—Å—è –∑–∞ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑—ñ–±—Ä–∞–Ω–∏—Ö –∫–∞–≤–æ–≤–∏—Ö –∑–µ—Ä–µ–Ω (‚òï) —É –≥—Ä—ñ:\n"
            "‚Äî –ó–Ω–∏–∂–∫–∞ 2%: –≤—ñ–¥ 100 –∑–µ—Ä–µ–Ω\n"
            "‚Äî –ó–Ω–∏–∂–∫–∞ 5%: –≤—ñ–¥ 200 –∑–µ—Ä–µ–Ω\n"
            "‚Äî –ë—Ä–µ–Ω–¥–æ–≤–∞–Ω–∞ —á–∞—à–∫–∞: –≤—ñ–¥ 5000 –∑–µ—Ä–µ–Ω\n\n"
            "–í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —É –≤–∫–ª–∞–¥—Ü—ñ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."
        )
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(help_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


    async def back_to_main(self, query: Update):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
        user = query.from_user
        welcome_message = (
            f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã\n\n"
            "–Ø - <b>Perky Coffee Jump Bot</b>! ü§ñ‚òï\n\n"
            "–ì–æ—Ç–æ–≤–∏–π –¥–æ –≥—Ä–∏? –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ! üëá"
        )
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game"))],
            [
                InlineKeyboardButton("‚òï –ú–µ–Ω—é –∫–∞–≤'—è—Ä–Ω—ñ", url=CAFE_MENU_URL),
            ],
            [
                InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop'),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
            ],
            [
                InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data='leaderboard'),
                InlineKeyboardButton("‚ùì –ü—Ä–∞–≤–∏–ª–∞", callback_data='help')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(welcome_message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

# –°—Ç–≤–æ—Ä—é—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
perky_bot = PerkyCoffeeBot()

async def setup_bot_handlers():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î –¥–æ–¥–∞—Ç–æ–∫ –±–æ—Ç–∞."""
    logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É Telegram-–±–æ—Ç–∞...")
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", perky_bot.start))
    application.add_handler(CallbackQueryHandler(perky_bot.button_callback))
    
    perky_bot.application = application
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–¥–∞–Ω–æ.")
