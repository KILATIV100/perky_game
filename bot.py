# bot.py: –í—Å—è –ª–æ–≥—ñ–∫–∞, –ø–æ–≤'—è–∑–∞–Ω–∞ –∑ Telegram-–±–æ—Ç–æ–º.

from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ContextTypes, Application, CommandHandler, CallbackQueryHandler
from telegram.constants import ParseMode
import config
from database import Database

class PerkyCoffeeBot:
    """–ö–ª–∞—Å, —â–æ —ñ–Ω–∫–∞–ø—Å—É–ª—é—î –ª–æ–≥—ñ–∫—É Telegram-–±–æ—Ç–∞."""
    def __init__(self, database: Database):
        self.db = database
        self.application: Application = None

    async def setup(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–∞ –±–æ—Ç–∞."""
        self.application = Application.builder().token(config.BOT_TOKEN).build()

    async def set_webhook(self):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –±–æ—Ç–∞."""
        webhook_url = f"{config.WEBAPP_URL}/{config.BOT_TOKEN}"
        await self.application.bot.set_webhook(webhook_url)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
        user = update.effective_user
        self.db.save_user(user.id, user.username, user.first_name)

        welcome_message = f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã\n\n–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ ü§ñ‚òï **Perky Coffee Jump**!\n\n–°—Ç—Ä–∏–±–∞–π, –∑–±–∏—Ä–∞–π –∑–µ—Ä–Ω–∞ —Ç–∞ —Å—Ç–∞–≤ —Ä–µ–∫–æ—Ä–¥–∏!"
        await update.message.reply_text(welcome_message, reply_markup=self._main_menu_keyboard(), parse_mode=ParseMode.MARKDOWN)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        await query.answer()

        action_map = {
            'stats': self.show_stats,
            'leaderboard': self.show_leaderboard,
            'shop': self.show_shop,
            'help': self.show_help,
            'back_main': self.back_to_main
        }

        if query.data in action_map:
            await action_map[query.data](query)
        elif query.data.startswith('buy_'):
            item_id = query.data.replace('buy_', '')
            await self.buy_item(query, item_id)

    async def show_stats(self, query):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—è."""
        user_id = query.from_user.id
        stats = self.db.get_user_stats(user_id)

        if not stats or stats['games_played'] == 0:
            stats_text = "üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n–¢–∏ —â–µ –Ω–µ –≥—Ä–∞–≤. –ß–∞—Å –ø–æ—á–∞—Ç–∏! üöÄ"
        else:
            last_played_str = datetime.fromisoformat(stats['last_played']).strftime("%d.%m.%Y %H:%M") if stats['last_played'] else '–ù—ñ–∫–æ–ª–∏'
            stats_text = (
                f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                f"üéÆ –Ü–≥–æ—Ä –∑—ñ–≥—Ä–∞–Ω–æ: *{stats['games_played']}*\n"
                f"üèîÔ∏è –†–µ–∫–æ—Ä–¥ –≤–∏—Å–æ—Ç–∏: *{stats['max_height']} –º*\n"
                f"‚òï –£—Å—å–æ–≥–æ –∑–µ—Ä–µ–Ω: *{stats['total_beans']}*\n"
                f"üìÖ –û—Å—Ç–∞–Ω–Ω—è –≥—Ä–∞: *{last_played_str}*"
            )
        await query.edit_message_text(stats_text, reply_markup=self._back_keyboard('back_main'), parse_mode=ParseMode.MARKDOWN)

    async def show_leaderboard(self, query):
        """–ü–æ–∫–∞–∑—É—î —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤."""
        leaderboard = self.db.get_leaderboard(10)
        leaderboard_text = "üèÜ **–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤**\n\n"
        if not leaderboard:
            leaderboard_text += "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ä–µ–∫–æ—Ä–¥—ñ–≤. –°—Ç–∞–Ω—å –ø–µ—Ä—à–∏–º!"
        else:
            for i, (username, first_name, max_height, total_beans) in enumerate(leaderboard, 1):
                name = first_name or username or "–ì—Ä–∞–≤–µ—Ü—å"
                emoji = ["ü•á", "ü•à", "ü•â"][i-1] if i <= 3 else f"{i}."
                leaderboard_text += f"{emoji} *{name}* - {max_height} –º\n"
        await query.edit_message_text(leaderboard_text, reply_markup=self._back_keyboard('back_main'), parse_mode=ParseMode.MARKDOWN)

    async def show_shop(self, query):
        """–ü–æ–∫–∞–∑—É—î –º–∞–≥–∞–∑–∏–Ω."""
        shop_text = "üõí **–ú–∞–≥–∞–∑–∏–Ω Perky Coffee**\n\n–ö—É–ø—É–π –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π –º–µ—Ä—á —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∞–π —Ä–æ–∑—Ä–æ–±–∫—É –≥—Ä–∏!"
        keyboard_buttons = [
            [InlineKeyboardButton(f"{item['name']} - {item['price']//100} –≥—Ä–Ω", callback_data=f'buy_{item_id}')]
            for item_id, item in config.SHOP_ITEMS.items()
        ]
        keyboard_buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')])
        await query.edit_message_text(shop_text, reply_markup=InlineKeyboardMarkup(keyboard_buttons))

    async def buy_item(self, query, item_id: str):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä—É."""
        item = config.SHOP_ITEMS.get(item_id)
        if not item:
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
        await query.edit_message_text(
            f"–í–∏ –æ–±—Ä–∞–ª–∏: *{item['name']}*\n\n{item['description']}\n\n–¶—ñ–Ω–∞: *{item['price']//100} –≥—Ä–Ω*\n\n_(–§—É–Ω–∫—Ü—ñ—è –æ–ø–ª–∞—Ç–∏ —É —Ä–æ–∑—Ä–æ–±—Ü—ñ)_",
            reply_markup=self._back_keyboard('shop'), parse_mode=ParseMode.MARKDOWN
        )

    async def show_help(self, query):
        """–ü–æ–∫–∞–∑—É—î –¥–æ–≤—ñ–¥–∫—É –ø–æ –≥—Ä—ñ."""
        help_text = (
            "‚ùì **–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –≥—Ä—ñ**\n\n"
            "üéÆ *–ö–µ—Ä—É–≤–∞–Ω–Ω—è:*\n–ù–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –µ–∫—Ä–∞–Ω –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å—Ç—Ä—ñ–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è.\n\n"
            "üéØ *–ú–µ—Ç–∞:*\n–°—Ç—Ä–∏–±–∞–π —è–∫–æ–º–æ–≥–∞ –≤–∏—â–µ, –∑–±–∏—Ä–∞–π –∫–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞ ‚òï —ñ –Ω–µ –ø–∞–¥–∞–π!\n\n"
            "–£—Å–ø—ñ—Ö—ñ–≤! üöÄ"
        )
        await query.edit_message_text(help_text, reply_markup=self._back_keyboard('back_main'), parse_mode=ParseMode.MARKDOWN)

    async def back_to_main(self, query):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
        user = query.from_user
        welcome_message = f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã\n\n–ì–æ—Ç–æ–≤–∏–π –¥–æ –Ω–æ–≤–∏—Ö —Ä–µ–∫–æ—Ä–¥—ñ–≤ —É **Perky Coffee Jump**? ü§ñ‚òï"
        await query.edit_message_text(welcome_message, reply_markup=self._main_menu_keyboard(), parse_mode=ParseMode.MARKDOWN)

    def _main_menu_keyboard(self):
        """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=f"{config.WEBAPP_URL}/static/index.html"))],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'), InlineKeyboardButton("üèÜ –õ—ñ–¥–µ—Ä–∏", callback_data='leaderboard')],
            [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop'), InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
        ])

    def _back_keyboard(self, callback_data: str):
        """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"."""
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=callback_data)]])

def setup_bot_handlers(bot_instance: PerkyCoffeeBot):
    """–†–µ—î—Å—Ç—Ä—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞."""
    application = bot_instance.application
    application.add_handler(CommandHandler("start", bot_instance.start))
    application.add_handler(CallbackQueryHandler(bot_instance.button_callback))

