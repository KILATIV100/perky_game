import os
import json
import logging
from datetime import datetime
from typing import Dict, Optional, List

import sqlite3
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    WebAppInfo,
    LabeledPrice,
    KeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    ContextTypes, 
    MessageHandler, 
    filters,
    PreCheckoutQueryHandler
)
from telegram.constants import ParseMode
import asyncio
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
import uvicorn
from pydantic import BaseModel

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL')
PORT = int(os.getenv('PORT', 8000))
PAYMENT_TOKEN = os.getenv('PAYMENT_TOKEN')  # Telegram Payment Provider Token

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–∞–≤'—è—Ä–Ω—ñ
CAFE_CONFIG = {
    "name": "Perky Coffee",
    "address": "–≤—É–ª. –°—É–º—Å—å–∫–∞ 12, –•–∞—Ä–∫—ñ–≤, –£–∫—Ä–∞—ó–Ω–∞",
    "coordinates": {
        "latitude": 49.9935,
        "longitude": 36.2304
    },
    "phone": "+380123456789",
    "working_hours": "–ü–Ω-–ù–¥: 08:00 - 22:00",
    "menu_url": "https://your-menu-link.com",  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    "instagram": "https://instagram.com/perkycoffee",
    "website": "https://perkycoffee.ua"
}

# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –º–∞–≥–∞–∑–∏–Ω—É
SHOP_ITEMS = {
    "merch": [
        {
            "id": "tshirt_black",
            "name": "üéΩ –§—É—Ç–±–æ–ª–∫–∞ Perky (—á–æ—Ä–Ω–∞)",
            "description": "–Ø–∫—ñ—Å–Ω–∞ –±–∞–≤–æ–≤–Ω—è–Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ –∑ –ª–æ–≥–æ—Ç–∏–ø–æ–º Perky Coffee",
            "price": 45000,  # –≤ –∫–æ–ø—ñ–π–∫–∞—Ö (450 –≥—Ä–Ω)
            "currency": "UAH",
            "image_url": "https://via.placeholder.com/300x300.png?text=Perky+T-Shirt"
        },
        {
            "id": "mug",
            "name": "‚òï –§—ñ—Ä–º–æ–≤–∞ —á–∞—à–∫–∞",
            "description": "–ö–µ—Ä–∞–º—ñ—á–Ω–∞ —á–∞—à–∫–∞ 350–º–ª –∑ —Ä–æ–±–æ—Ç–æ–º Perky",
            "price": 25000,
            "currency": "UAH",
            "image_url": "https://via.placeholder.com/300x300.png?text=Perky+Mug"
        },
        {
            "id": "hoodie",
            "name": "üëï –•—É–¥—ñ Perky",
            "description": "–¢–µ–ø–ª–µ —Ö—É–¥—ñ –∑ –∫–∞–ø—é—à–æ–Ω–æ–º —Ç–∞ –∫–∏—à–µ–Ω–µ—é-–∫–µ–Ω–≥—É—Ä—É",
            "price": 95000,
            "currency": "UAH",
            "image_url": "https://via.placeholder.com/300x300.png?text=Perky+Hoodie"
        },
        {
            "id": "cap",
            "name": "üß¢ –ö–µ–ø–∫–∞ Perky",
            "description": "–°—Ç–∏–ª—å–Ω–∞ –∫–µ–ø–∫–∞ –∑ –≤–∏—à–∏–≤–∫–æ—é",
            "price": 35000,
            "currency": "UAH",
            "image_url": "https://via.placeholder.com/300x300.png?text=Perky+Cap"
        },
        {
            "id": "stickers",
            "name": "üé® –ù–∞–±—ñ—Ä —Å—Ç—ñ–∫–µ—Ä—ñ–≤",
            "description": "10 –∫—Ä—É—Ç–∏—Ö —Å—Ç—ñ–∫–µ—Ä—ñ–≤ –∑ —Ä–æ–±–æ—Ç–æ–º Perky",
            "price": 8000,
            "currency": "UAH",
            "image_url": "https://via.placeholder.com/300x300.png?text=Stickers"
        }
    ],
    "coffee": [
        {
            "id": "beans_250",
            "name": "‚òï –ö–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞ 250–≥",
            "description": "–§—ñ—Ä–º–æ–≤–∞ —Å—É–º—ñ—à Perky Blend - 100% –∞—Ä–∞–±—ñ–∫–∞",
            "price": 18000,
            "currency": "UAH",
            "image_url": "https://via.placeholder.com/300x300.png?text=Coffee+Beans"
        },
        {
            "id": "beans_1kg",
            "name": "‚òï –ö–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞ 1–∫–≥",
            "description": "–ï–∫–æ–Ω–æ–º–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∞ —Ñ—ñ—Ä–º–æ–≤–æ—ó —Å—É–º—ñ—à—ñ",
            "price": 65000,
            "currency": "UAH",
            "image_url": "https://via.placeholder.com/300x300.png?text=Coffee+1kg"
        },
        {
            "id": "subscription",
            "name": "üì¶ –ö–∞–≤–æ–≤–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ (–º—ñ—Å—è—Ü—å)",
            "description": "–©–æ—Ç–∏–∂–Ω–µ–≤–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–≤—ñ–∂–æ–æ–±—Å–º–∞–∂–µ–Ω–æ—ó –∫–∞–≤–∏",
            "price": 60000,
            "currency": "UAH",
            "image_url": "https://via.placeholder.com/300x300.png?text=Subscription"
        }
    ],
    "vouchers": [
        {
            "id": "voucher_100",
            "name": "üéÅ –ü–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç 100 –≥—Ä–Ω",
            "description": "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –Ω–∞ –ø–æ–∫—É–ø–∫–∏ –≤ Perky Coffee",
            "price": 10000,
            "currency": "UAH",
            "image_url": "https://via.placeholder.com/300x300.png?text=Voucher+100"
        },
        {
            "id": "voucher_500",
            "name": "üéÅ –ü–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç 500 –≥—Ä–Ω",
            "description": "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –Ω–∞ –ø–æ–∫—É–ø–∫–∏ –≤ Perky Coffee",
            "price": 50000,
            "currency": "UAH",
            "image_url": "https://via.placeholder.com/300x300.png?text=Voucher+500"
        }
    ]
}

if not BOT_TOKEN:
    logger.error("BOT_TOKEN is not set!")
    exit(1)
if not WEBAPP_URL:
    logger.error("WEBAPP_URL is not set!")
    exit(1)

# FastAPI –¥–æ–¥–∞—Ç–æ–∫
app = FastAPI(title="Perky Coffee Jump WebApp")

# Pydantic –º–æ–¥–µ–ª—ñ
class GameStats(BaseModel):
    user_id: int
    score: int
    height: int
    collected_beans: int
    mode: str
    achievements: Optional[str] = None

class UserProgress(BaseModel):
    user_id: int
    level: int
    experience: int
    coins: int
    powerups: str
    character: str

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
def get_db_connection():
    conn = sqlite3.connect('perky_game.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∏
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS game_stats (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                best_height INTEGER DEFAULT 0,
                best_coffee INTEGER DEFAULT 0,
                total_coffee INTEGER DEFAULT 0,
                games_played INTEGER DEFAULT 0,
                achievements TEXT DEFAULT '{}'
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü—è –ø—Ä–æ–≥—Ä–µ—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_progress (
                user_id INTEGER PRIMARY KEY,
                level INTEGER DEFAULT 1,
                experience INTEGER DEFAULT 0,
                coins INTEGER DEFAULT 0,
                powerups TEXT DEFAULT '{}',
                character TEXT DEFAULT '{"skin":"default","jumpEffect":"default"}',
                friends TEXT DEFAULT '[]',
                last_daily_reward DATE
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü—è –∑–∞–º–æ–≤–ª–µ–Ω—å
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                order_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                item_id TEXT,
                item_name TEXT,
                amount INTEGER,
                status TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                telegram_payment_id TEXT
            )
        """)
        
        conn.commit()
    logger.info("Database initialized.")

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–ª–∞—Å –±–æ—Ç–∞
class PerkyBot:
    def __init__(self):
        self.application: Optional[Application] = None

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        user = update.effective_user
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT OR IGNORE INTO game_stats 
                (user_id, username, best_height, best_coffee, total_coffee, games_played) 
                VALUES (?, ?, 0, 0, 0, 0)
            """, (user.id, user.username or user.first_name))
            
            cursor.execute("""
                INSERT OR IGNORE INTO user_progress 
                (user_id) VALUES (?)
            """, (user.id,))
            
            conn.commit()

        welcome_message = (
            f"ü§ñ‚òï *–í—ñ—Ç–∞—é –≤ Perky Coffee Jump!*\n\n"
            f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! –Ø —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ –∫–∞–≤–∏ —Ç–∞ —ñ–≥–æ—Ä!\n\n"
            f"*–©–æ —è –≤–º—ñ—é:*\n"
            f"üéÆ –ó–∞–ø—É—Å–∫–∞—Ç–∏ –≥—Ä—É Perky Coffee Jump\n"
            f"üõçÔ∏è –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω –º–µ—Ä—á—É —Ç–∞ –∫–∞–≤–∏\n"
            f"üìç –î–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑–Ω–∞–π—Ç–∏ –Ω–∞—à—É –∫–∞–≤'—è—Ä–Ω—é\n"
            f"üìä –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            f"üéÅ –î–∞–≤–∞—Ç–∏ –±–æ–Ω—É—Å–∏ —Ç–∞ –∑–Ω–∏–∂–∫–∏\n\n"
            f"–û–±–∏—Ä–∞–π –¥—ñ—é –≤ –º–µ–Ω—é –Ω–∏–∂—á–µ! üëá"
        )
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ì—Ä–∞—Ç–∏", web_app=WebAppInfo(url=WEBAPP_URL))],
            [
                InlineKeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop_main'),
                InlineKeyboardButton("üìã –ú–µ–Ω—é –∫–∞–≤'—è—Ä–Ω—ñ", url=CAFE_CONFIG["menu_url"])
            ],
            [
                InlineKeyboardButton("üìç –Ø–∫ –Ω–∞—Å –∑–Ω–∞–π—Ç–∏", callback_data='location'),
                InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')
            ],
            [
                InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data='leaderboard'),
                InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å–∏", callback_data='bonuses')
            ],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å", callback_data='about')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(
                welcome_message, 
                reply_markup=reply_markup, 
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.callback_query.message.edit_text(
                welcome_message,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        # –†–æ—É—Ç–∏–Ω–≥ –ø–æ callback_data
        if data == 'back_main':
            await self.start(update, context)
        elif data == 'stats':
            await self.show_stats(query, context)
        elif data == 'leaderboard':
            await self.show_leaderboard(query, context)
        elif data == 'bonuses':
            await self.show_bonuses(query, context)
        elif data == 'location':
            await self.show_location(query, context)
        elif data == 'about':
            await self.show_about(query, context)
        elif data == 'shop_main':
            await self.show_shop_menu(query, context)
        elif data.startswith('shop_category_'):
            category = data.replace('shop_category_', '')
            await self.show_shop_category(query, context, category)
        elif data.startswith('buy_'):
            item_id = data.replace('buy_', '')
            await self.initiate_purchase(query, context, item_id)

    async def show_stats(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        user_id = query.from_user.id
        
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT gs.*, up.level, up.experience, up.coins 
                FROM game_stats gs
                LEFT JOIN user_progress up ON gs.user_id = up.user_id
                WHERE gs.user_id = ?
            """, (user_id,))
            stats = cursor.fetchone()
        
        if not stats:
            await query.message.edit_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –∑—ñ–≥—Ä–∞–π—Ç–µ –≤ –≥—Ä—É!")
            return
        
        message = (
            f"üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"‚ö° –†—ñ–≤–µ–Ω—å: *{stats['level']}*\n"
            f"üí´ –î–æ—Å–≤—ñ–¥: *{stats['experience']}* XP\n"
            f"ü™ô –ú–æ–Ω–µ—Ç: *{stats['coins']}*\n\n"
            f"üéÆ *–Ü–≥—Ä–æ–≤—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è:*\n"
            f"üèÜ –†–µ–∫–æ—Ä–¥ –≤–∏—Å–æ—Ç–∏: *{stats['best_height']}–º*\n"
            f"‚òï –ù–∞–π–±—ñ–ª—å—à–µ –∑–µ—Ä–µ–Ω: *{stats['best_coffee']}*\n"
            f"üì¶ –í—Å—å–æ–≥–æ –∑—ñ–±—Ä–∞–Ω–æ: *{stats['total_coffee']}* –∑–µ—Ä–µ–Ω\n"
            f"üïπÔ∏è –Ü–≥–æ—Ä –∑—ñ–≥—Ä–∞–Ω–æ: *{stats['games_played']}*\n\n"
            f"–ü—Ä–æ–¥–æ–≤–∂—É–π –≥—Ä–∞—Ç–∏, —â–æ–± –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏! üöÄ"
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_main')]]
        
        await query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

    async def show_leaderboard(self, query, context):
        """–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤"""
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT username, best_height, best_coffee 
                FROM game_stats 
                ORDER BY best_height DESC 
                LIMIT 10
            """)
            leaders = cursor.fetchall()
        
        message = "üèÜ *–¢–æ–ø-10 –≥—Ä–∞–≤—Ü—ñ–≤*\n\n"
        
        medals = ["ü•á", "ü•à", "ü•â"]
        for i, leader in enumerate(leaders):
            medal = medals[i] if i < 3 else f"{i+1}."
            message += f"{medal} *{leader['username']}*\n"
            message += f"   üìè {leader['best_height']}–º  |  ‚òï {leader['best_coffee']} –∑–µ—Ä–µ–Ω\n\n"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_main')]]
        
        await query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

    async def show_bonuses(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –±–æ–Ω—É—Å–∏ —Ç–∞ –∑–Ω–∏–∂–∫–∏"""
        user_id = query.from_user.id
        
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT total_coffee, last_daily_reward 
                FROM user_progress up
                JOIN game_stats gs ON up.user_id = gs.user_id
                WHERE up.user_id = ?
            """, (user_id,))
            user_data = cursor.fetchone()
        
        total_beans = user_data['total_coffee'] if user_data else 0
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –±–æ–Ω—É—Å–∏
        bonuses = []
        if total_beans >= 50:
            bonuses.append("‚úÖ *2% –∑–Ω–∏–∂–∫–∞* –Ω–∞ –≤—Å—ñ –Ω–∞–ø–æ—ó")
        if total_beans >= 100:
            bonuses.append("‚úÖ *5% –∑–Ω–∏–∂–∫–∞* –Ω–∞ –≤—Å—ñ –Ω–∞–ø–æ—ó")
        if total_beans >= 500:
            bonuses.append("‚úÖ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ —á–∞—à–∫–∞* –ø—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ –∫–∞–≤–∏")
        if total_beans >= 1000:
            bonuses.append("‚úÖ *10% –∑–Ω–∏–∂–∫–∞* –Ω–∞ –≤–µ—Å—å –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
        
        message = (
            f"üéÅ *–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å—ñ–≤*\n\n"
            f"‚òï –ó—ñ–±—Ä–∞–Ω–æ –∑–µ—Ä–µ–Ω: *{total_beans}*\n\n"
        )
        
        if bonuses:
            message += "*–¢–≤–æ—ó –∞–∫—Ç–∏–≤–Ω—ñ –±–æ–Ω—É—Å–∏:*\n" + "\n".join(bonuses) + "\n\n"
        else:
            message += "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤.\n–ì—Ä–∞–π —ñ –∑–±–∏—Ä–∞–π –∑–µ—Ä–Ω–∞! üéÆ\n\n"
        
        message += (
            "*–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å–∏:*\n"
            "‚Ä¢ 50 –∑–µ—Ä–µ–Ω ‚Üí 2% –∑–Ω–∏–∂–∫–∞\n"
            "‚Ä¢ 100 –∑–µ—Ä–µ–Ω ‚Üí 5% –∑–Ω–∏–∂–∫–∞\n"
            "‚Ä¢ 500 –∑–µ—Ä–µ–Ω ‚Üí –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ —á–∞—à–∫–∞\n"
            "‚Ä¢ 1000 –∑–µ—Ä–µ–Ω ‚Üí 10% –∑–Ω–∏–∂–∫–∞\n\n"
            "–ü–æ–∫–∞–∂–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–∞—Ä–∏—Å—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó! üì±"
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_main')]]
        
        await query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

    async def show_location(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é –∫–∞–≤'—è—Ä–Ω—ñ"""
        message = (
            f"üìç *{CAFE_CONFIG['name']}*\n\n"
            f"üì´ –ê–¥—Ä–µ—Å–∞: {CAFE_CONFIG['address']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {CAFE_CONFIG['phone']}\n"
            f"üïê –ì–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏: {CAFE_CONFIG['working_hours']}\n\n"
            f"üåê [–ù–∞—à —Å–∞–π—Ç]({CAFE_CONFIG['website']})\n"
            f"üì∏ [Instagram]({CAFE_CONFIG['instagram']})\n\n"
            f"–ù–∞–¥—ñ—à–ª—é –ª–æ–∫–∞—Ü—ñ—é –Ω–∞ –∫–∞—Ä—Ç—ñ –Ω–∏–∂—á–µ! üìç"
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_main')]]
        
        await query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ª–æ–∫–∞—Ü—ñ—é
        await context.bot.send_location(
            chat_id=query.message.chat_id,
            latitude=CAFE_CONFIG['coordinates']['latitude'],
            longitude=CAFE_CONFIG['coordinates']['longitude']
        )

    async def show_about(self, query, context):
        """–ü—Ä–æ Perky Coffee"""
        message = (
            f"‚òï *–ü—Ä–æ Perky Coffee*\n\n"
            f"–ú–∏ - –∫–æ–º–∞–Ω–¥–∞ –∫–∞–≤–æ–º–∞–Ω—ñ–≤, —è–∫–∞ –ø–æ—î–¥–Ω—É—î –ª—é–±–æ–≤ –¥–æ —è–∫—ñ—Å–Ω–æ—ó –∫–∞–≤–∏ "
            f"–∑ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è–º–∏! üöÄ\n\n"
            f"*–ù–∞—à–∞ –º—ñ—Å—ñ—è:*\n"
            f"–ó—Ä–æ–±–∏—Ç–∏ –∫–æ–∂–Ω—É —á–∞—à–∫—É –∫–∞–≤–∏ –æ—Å–æ–±–ª–∏–≤–æ—é, –∞ –∫–æ–∂–µ–Ω –≤—ñ–∑–∏—Ç - "
            f"–Ω–µ–∑–∞–±—É—Ç–Ω—å–æ—é –ø—Ä–∏–≥–æ–¥–æ—é! üéÆ‚òï\n\n"
            f"*–©–æ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ:*\n"
            f"‚Ä¢ –°–≤—ñ–∂–æ–æ–±—Å–º–∞–∂–µ–Ω–∞ –∫–∞–≤–∞\n"
            f"‚Ä¢ –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –Ω–∞–ø–æ—ó –≤—ñ–¥ –±–∞—Ä–∏—Å—Ç\n"
            f"‚Ä¢ –ó–∞—Ç–∏—à–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞\n"
            f"‚Ä¢ –Ü–≥—Ä–æ–≤–∞ –∑–æ–Ω–∞ —Ç–∞ –µ—Å–ø–æ—Ä—Ç\n"
            f"‚Ä¢ –ö—Ä—É—Ç–∏–π –º–µ—Ä—á\n\n"
            f"–ü—Ä–∏—Ö–æ–¥—å —ñ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è —Å–∞–º! üòä"
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_main')]]
        
        await query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

    async def show_shop_menu(self, query, context):
        """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω—É"""
        message = (
            f"üõçÔ∏è *–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω Perky Coffee*\n\n"
            f"–û–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:\n\n"
            f"üëï –ú–µ—Ä—á - —Ñ—É—Ç–±–æ–ª–∫–∏, —Ö—É–¥—ñ, –∫–µ–ø–∫–∏\n"
            f"‚òï –ö–∞–≤–∞ - –∑–µ—Ä–Ω–∞ —Ç–∞ –ø—ñ–¥–ø–∏—Å–∫–∏\n"
            f"üéÅ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ - –ø–æ–¥–∞—Ä—É–Ω–∫–∏ –¥–ª—è –¥—Ä—É–∑—ñ–≤"
        )
        
        keyboard = [
            [InlineKeyboardButton("üëï –ú–µ—Ä—á", callback_data='shop_category_merch')],
            [InlineKeyboardButton("‚òï –ö–∞–≤–∞", callback_data='shop_category_coffee')],
            [InlineKeyboardButton("üéÅ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏", callback_data='shop_category_vouchers')],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_main')]
        ]
        
        await query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

    async def show_shop_category(self, query, context, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        items = SHOP_ITEMS.get(category, [])
        
        category_names = {
            'merch': 'üëï –ú–µ—Ä—á',
            'coffee': '‚òï –ö–∞–≤–∞',
            'vouchers': 'üéÅ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏'
        }
        
        for item in items:
            price_uah = item['price'] / 100
            message = (
                f"*{item['name']}*\n\n"
                f"{item['description']}\n\n"
                f"üí∞ –¶—ñ–Ω–∞: *{price_uah:.0f} –≥—Ä–Ω*"
            )
            
            keyboard = [
                [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", callback_data=f"buy_{item['id']}")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data='shop_main')]
            ]
            
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=item['image_url'],
                caption=message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )

    async def initiate_purchase(self, query, context, item_id: str):
        """–ü–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –æ–ø–ª–∞—Ç–∏"""
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–≤–∞—Ä
        item = None
        for category in SHOP_ITEMS.values():
            for product in category:
                if product['id'] == item_id:
                    item = product
                    break
        
        if not item:
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
        
        if not PAYMENT_TOKEN:
            await query.answer(
                "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                "–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
                show_alert=True
            )
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–≤–æ–π—Å
        title = item['name']
        description = item['description']
        payload = f"order_{item_id}_{query.from_user.id}"
        currency = item['currency']
        prices = [LabeledPrice(label=item['name'], amount=item['price'])]
        
        await context.bot.send_invoice(
            chat_id=query.message.chat_id,
            title=title,
            description=description,
            payload=payload,
            provider_token=PAYMENT_TOKEN,
            currency=currency,
            prices=prices,
            photo_url=item['image_url'],
            need_name=True,
            need_phone_number=True,
            need_shipping_address=True
        )

    async def precheckout_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ—é"""
        query = update.pre_checkout_query
        await query.answer(ok=True)

    async def successful_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å–ø—ñ—à–Ω–∞ –æ–ø–ª–∞—Ç–∞"""
        payment = update.message.successful_payment
        user = update.effective_user
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO orders 
                (user_id, username, item_id, item_name, amount, status, telegram_payment_id)
                VALUES (?, ?, ?, ?, ?, 'paid', ?)
            """, (
                user.id,
                user.username or user.first_name,
                payment.invoice_payload.split('_')[1],
                payment.invoice_payload,
                payment.total_amount,
                payment.telegram_payment_charge_id
            ))
            conn.commit()
        
        message = (
            f"‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!*\n\n"
            f"–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º "
            f"–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n"
            f"–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: `{payment.telegram_payment_charge_id}`\n\n"
            f"–ó –ø–∏—Ç–∞–Ω—å –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è: {CAFE_CONFIG['phone']}"
        )
        
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        
        # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å–Ω—ñ –º–æ–Ω–µ—Ç–∏
        bonus_coins = payment.total_amount // 10000  # 1 –º–æ–Ω–µ—Ç–∞ –∑–∞ –∫–æ–∂–Ω—ñ 100 –≥—Ä–Ω
        
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE user_progress 
                SET coins = coins + ?
                WHERE user_id = ?
            """, (bonus_coins, user.id))
            conn.commit()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
perky_bot = PerkyBot()

# FastAPI endpoints
app.mount("/game", StaticFiles(directory="static", html=True), name="static")

@app.post("/save_game_stats")
async def save_game_stats(stats: GameStats):
    """–ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∏"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ game_stats
            cursor.execute("""
                INSERT INTO game_stats (user_id, best_height, best_coffee, total_coffee, games_played)
                VALUES (?, ?, ?, ?, 1)
                ON CONFLICT(user_id) DO UPDATE SET
                    best_height = MAX(best_height, ?),
                    best_coffee = MAX(best_coffee, ?),
                    total_coffee = total_coffee + ?,
                    games_played = games_played + 1
            """, (stats.user_id, stats.height, stats.collected_beans, 
                  stats.collected_beans, stats.height, stats.collected_beans, 
                  stats.collected_beans))
            
            conn.commit()
            
        return {"status": "success", "message": "Stats saved"}
    except Exception as e:
        logger.error(f"Error saving game stats: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/save_progress")
async def save_user_progress(progress: UserProgress):
    """–ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO user_progress (user_id, level, experience, coins, powerups, character)
                VALUES (?, ?, ?, ?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET
                    level = ?,
                    experience = ?,
                    coins = ?,
                    powerups = ?,
                    character = ?
            """, (progress.user_id, progress.level, progress.experience, 
                  progress.coins, progress.powerups, progress.character,
                  progress.level, progress.experience, progress.coins,
                  progress.powerups, progress.character))
            conn.commit()
            
        return {"status": "success"}
    except Exception as e:
        logger.error(f"Error saving progress: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/get_progress/{user_id}")
async def get_user_progress(user_id: int):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT * FROM user_progress WHERE user_id = ?
            """, (user_id,))
            progress = cursor.fetchone()
            
            if progress:
                return dict(progress)
            else:
                return {
                    "level": 1,
                    "experience": 0,
                    "coins": 0,
                    "powerups": "{}",
                    "character": '{"skin":"default","jumpEffect":"default"}'
                }
    except Exception as e:
        logger.error(f"Error getting progress: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post(f"/{BOT_TOKEN}")
async def telegram_webhook(request: Request):
    """Telegram webhook"""
    try:
        if not perky_bot.application:
            return {"status": "bot not ready"}, 503
        
        json_data = await request.json()
        update = Update.de_json(json_data, perky_bot.application.bot)
        
        async with perky_bot.application:
            await perky_bot.application.process_update(update)
        
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"status": "error", "message": str(e)}

async def setup_bot():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
    try:
        perky_bot.application = Application.builder().token(BOT_TOKEN).build()
        
        # –•–µ–Ω–¥–ª–µ—Ä–∏
        perky_bot.application.add_handler(CommandHandler("start", perky_bot.start))
        perky_bot.application.add_handler(CallbackQueryHandler(perky_bot.button_callback))
        perky_bot.application.add_handler(PreCheckoutQueryHandler(perky_bot.precheckout_callback))
        perky_bot.application.add_handler(
            MessageHandler(filters.SUCCESSFUL_PAYMENT, perky_bot.successful_payment_callback)
        )
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
        webhook_url = f"{WEBAPP_URL.replace('/game', '')}/{BOT_TOKEN}"
        await perky_bot.application.bot.set_webhook(webhook_url)
        
        logger.info(f"Bot ready! Webhook: {webhook_url}")
    except Exception as e:
        logger.error(f"Bot setup error: {e}")
        raise

@app.on_event("startup")
async def startup_event():
    """–ó–∞–ø—É—Å–∫"""
    logger.info("Initializing database...")
    init_db()
    logger.info("Starting bot...")
    await setup_bot()
    logger.info("Ready!")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PORT)
