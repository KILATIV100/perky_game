# bot.py: –í—Å—è –ª–æ–≥—ñ–∫–∞ Telegram-–±–æ—Ç–∞.
# –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥–∏, –∫–Ω–æ–ø–∫–∏ —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode
from datetime import datetime

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é, –±–∞–∑—É –¥–∞–Ω–∏—Ö —Ç–∞ –æ–±'—î–∫—Ç –±–æ—Ç–∞
from config import BOT_TOKEN, WEBAPP_URL
from database import db

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

class PerkyCoffeeBot:
    def __init__(self):
        self.application: Application = None

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
        user = update.effective_user
        # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
        db.save_user_info(user.id, user.username, user.first_name)
        
        welcome_message = f"""
ü§ñ‚òï –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ **Perky Coffee Jump**!

–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã

–¶–µ –∑–∞—Ö–æ–ø–ª–∏–≤–∞ –≥—Ä–∞, –¥–µ —Ç–∏ –≥—Ä–∞—î—à –∑–∞ –∫–∞–≤–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞, —è–∫–∏–π –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø—ñ–¥—Å—Ç—Ä–∏–±–Ω—É—Ç–∏ —è–∫–æ–º–æ–≥–∞ –≤–∏—â–µ, –∑–±–∏—Ä–∞—é—á–∏ –∫–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞!

–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏.
        """
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –î–æ–¥–∞–Ω–æ –∫–Ω–æ–ø–∫—É "–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤"
        keyboard = [
            [InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game"))],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤", callback_data='leaderboard')],
            [InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫."""
        query = update.callback_query
        await query.answer()
        
        actions = {
            'stats': self.show_stats,
            'leaderboard': self.show_leaderboard,
            'help': self.show_help,
            'main_menu': self.back_to_main_menu,
        }
        
        action = actions.get(query.data)
        if action:
            await action(query)

    async def show_stats(self, query):
        """–ü–æ–∫–∞–∑—É—î –æ—Å–æ–±–∏—Å—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–≤—Ü—è."""
        user_id = query.from_user.id
        stats = db.get_user_stats(user_id)
        
        if not stats or stats.get('games_played', 0) == 0:
            stats_text = "üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n–¢–∏ —â–µ –Ω–µ –∑—ñ–≥—Ä–∞–≤ –∂–æ–¥–Ω–æ—ó –≥—Ä–∏. –ß–∞—Å –ø–æ—á–∞—Ç–∏! üöÄ"
        else:
            last_played_str = "–Ω–µ—â–æ–¥–∞–≤–Ω–æ"
            if stats.get('last_played'):
                try:
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —á–∞—Å –∑ UTC (—è–∫ –∑–±–µ—Ä—ñ–≥–∞—î Railway) —É –ª–æ–∫–∞–ª—å–Ω–∏–π
                    dt_object = datetime.strptime(stats['last_played'], '%Y-%m-%d %H:%M:%S.%f') if '.' in stats['last_played'] else datetime.strptime(stats['last_played'], '%Y-%m-%d %H:%M:%S')
                    last_played_str = dt_object.strftime("%d.%m.%Y –æ %H:%M")
                except (ValueError, TypeError):
                    # –Ø–∫—â–æ —Ñ–æ—Ä–º–∞—Ç —ñ–Ω—à–∏–π –∞–±–æ None, –ø–æ–∫–∞–∑—É—î–º–æ —è–∫ —î
                    last_played_str = str(stats['last_played']).split(" ")[0]


            stats_text = f"""
üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üèÜ **–†–µ–∫–æ—Ä–¥ –≤–∏—Å–æ—Ç–∏:** {stats.get('max_height', 0)} –º
‚òï **–í—Å—å–æ–≥–æ –∑–µ—Ä–µ–Ω:** {stats.get('total_beans', 0)}
üéÆ **–Ü–≥–æ—Ä –∑—ñ–≥—Ä–∞–Ω–æ:** {stats.get('games_played', 0)}
üìÖ **–û—Å—Ç–∞–Ω–Ω—è –≥—Ä–∞:** {last_played_str}

–ü—Ä–æ–¥–æ–≤–∂—É–π –≥—Ä–∞—Ç–∏, —â–æ–± —Å—Ç–∞—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–º!
            """
        
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data='main_menu')]]
        await query.edit_message_text(stats_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)

    async def show_leaderboard(self, query):
        """–ü–æ–∫–∞–∑—É—î –≥–ª–æ–±–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤."""
        leaderboard_data = db.get_leaderboard(10)
        
        if not leaderboard_data:
            leaderboard_text = "üèÜ **–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤**\n\n–ü–æ–∫–∏ —â–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –≥—Ä–∞–≤. –°—Ç–∞–Ω—å –ø–µ—Ä—à–∏–º! üöÄ"
        else:
            leaderboard_text = "üèÜ **–¢–æ–ø-10 –≥—Ä–∞–≤—Ü—ñ–≤:**\n\n"
            emojis = ["ü•á", "ü•à", "ü•â"]
            for i, row in enumerate(leaderboard_data):
                # Unpack tuple or dictionary
                if isinstance(row, dict):
                    name, max_height, total_beans = row['display_name'], row['max_height'], row['total_beans']
                else:
                    name, max_height, total_beans = row
                
                place = emojis[i] if i < 3 else f"{i + 1}."
                leaderboard_text += f"{place} **{name}**\n      üèîÔ∏è {max_height} –º  |  ‚òïÔ∏è {total_beans} –∑–µ—Ä–µ–Ω\n"
        
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data='main_menu')]]
        await query.edit_message_text(leaderboard_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)

    async def show_help(self, query):
        """–ü–æ–∫–∞–∑—É—î –¥–æ–≤—ñ–¥–∫—É –ø–æ –≥—Ä—ñ."""
        help_text = """
‚ùì **–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –≥—Ä—ñ**

**–ú–µ—Ç–∞:** –°—Ç—Ä–∏–±–∞–π —è–∫–æ–º–æ–≥–∞ –≤–∏—â–µ, –∑–±–∏—Ä–∞–π –∫–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞ ‚òï —ñ –Ω–µ –ø–∞–¥–∞–π!

**–ö–µ—Ä—É–≤–∞–Ω–Ω—è:**
- **–ö–Ω–æ–ø–∫–∏:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å—Ç—Ä—ñ–ª–∫–∏ "‚Üê" —Ç–∞ "‚Üí" –≤–Ω–∏–∑—É –µ–∫—Ä–∞–Ω—É.
- **–ì—ñ—Ä–æ—Å–∫–æ–ø:** –ù–∞—Ö–∏–ª—è–π —Ç–µ–ª–µ—Ñ–æ–Ω, —â–æ–± —Ä—É—Ö–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–º–æ–∂–Ω–∞ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –≥—Ä–∏).

**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∏:**
- **–ö–æ—Ä–∏—á–Ω–µ–≤—ñ:** –ó–≤–∏—á–∞–π–Ω—ñ —Ç–∞ –±–µ–∑–ø–µ—á–Ω—ñ.
- **–ó–µ–ª–µ–Ω—ñ:** –ë–∞—Ç—É—Ç–∏! –ü—ñ–¥–∫–∏–¥–∞—é—Ç—å –∑–Ω–∞—á–Ω–æ –≤–∏—â–µ.
- **–ö—Ä–∏—Ö–∫—ñ:** –ó–Ω–∏–∫–∞—é—Ç—å –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –¥–æ—Ç–∏–∫—É!

–£—Å–ø—ñ—Ö—ñ–≤ —É —Å—Ç—Ä–∏–±–∫–∞—Ö! üöÄ
        """
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data='main_menu')]]
        await query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)

    async def back_to_main_menu(self, query):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        user = query.from_user
        welcome_message = f"""
ü§ñ‚òï **Perky Coffee Jump**

–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ.
        """
        keyboard = [
            [InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game"))],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤", callback_data='leaderboard')],
            [InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')]
        ]
        await query.edit_message_text(welcome_message, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)

# –°—Ç–≤–æ—Ä—é—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
perky_bot = PerkyCoffeeBot()

async def setup_bot():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–æ—Ç–∞."""
    perky_bot.application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    perky_bot.application.add_handler(CommandHandler("start", perky_bot.start))
    perky_bot.application.add_handler(CallbackQueryHandler(perky_bot.button_callback))
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
    # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: URL –≤–µ–±—Ö—É–∫–∞ —Ç–µ–ø–µ—Ä –≤–∫–∞–∑—É—î –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
    webhook_url = f"{WEBAPP_URL}/{BOT_TOKEN}"
    await perky_bot.application.bot.set_webhook(webhook_url)
    logger.info(f"–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {webhook_url}")

