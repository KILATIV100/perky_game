# bot.py: –í—Å—è –ª–æ–≥—ñ–∫–∞, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è Telegram-–±–æ—Ç–∞.
# –í–∫–ª—é—á–∞—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥, –∫–Ω–æ–ø–æ–∫ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞.

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

from config import BOT_TOKEN, WEBAPP_URL, SHOP_ITEMS
from database import db

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

class PerkyCoffeeBot:
    def __init__(self):
        # application –±—É–¥–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ setup_bot
        self.application: Application | None = None

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
        user = update.effective_user
        db.save_user(user.id, user.username, user.first_name)
        
        welcome_message = f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã\n\n–Ø - Perky Coffee Jump Bot! ü§ñ‚òï\n\n–ì–æ—Ç–æ–≤–∏–π –¥–æ –≥—Ä–∏? –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ! üëá"
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game"))],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
                InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤", callback_data='leaderboard')
            ],
            [
                InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop'),
                InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if query.data == 'stats':
            await self.show_stats(query)
        elif query.data == 'leaderboard':
            await self.show_leaderboard(query)
        elif query.data == 'shop':
            await self.show_shop(query)
        elif query.data == 'help':
            await self.show_help(query)
        elif query.data == 'back_main':
            await self.back_to_main(query)
        elif query.data.startswith('buy_'):
            item_id = query.data.replace('buy_', '')
            await self.buy_item(query, item_id)

    async def show_stats(self, query: Update):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        user_id = query.from_user.id
        stats = db.get_user_stats(user_id)
        
        if not stats or stats.get('games_played', 0) == 0:
            stats_text = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä–æ–∂–Ω—è. –ß–∞—Å –∑—ñ–≥—Ä–∞—Ç–∏ –ø–µ—Ä—à—É –≥—Ä—É!"
        else:
            stats_text = (
                f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"üèÜ –†–µ–∫–æ—Ä–¥: **{stats['max_height']}** –º\n"
                f"‚òï –ó—ñ–±—Ä–∞–Ω–æ –∑–µ—Ä–µ–Ω: **{stats['total_beans']}**\n"
                f"üïπÔ∏è –ó—ñ–≥—Ä–∞–Ω–æ —ñ–≥–æ—Ä: **{stats['games_played']}**"
            )
        
        keyboard = [
            [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤", callback_data='leaderboard')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')]
        ]
        await query.edit_message_text(stats_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)

    async def show_leaderboard(self, query: Update):
        """–ü–æ–∫–∞–∑—É—î —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤."""
        leaderboard = db.get_leaderboard()
        
        if not leaderboard:
            leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è. –ë—É–¥—å—Ç–µ –ø–µ—Ä—à–∏–º!"
        else:
            leaderboard_text = "üèÜ **–¢–æ–ø-10 –≥—Ä–∞–≤—Ü—ñ–≤:**\n\n"
            for i, (username, first_name, max_height, _) in enumerate(leaderboard, 1):
                name = first_name or username or "–ê–Ω–æ–Ω—ñ–º"
                emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                leaderboard_text += f"{emoji} {name} - **{max_height}** –º\n"

        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data='stats')]]
        await query.edit_message_text(leaderboard_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
        
    async def show_shop(self, query: Update):
        """–ü–æ–∫–∞–∑—É—î –º–∞–≥–∞–∑–∏–Ω."""
        shop_text = "üõí **–ú–∞–≥–∞–∑–∏–Ω –º–µ—Ä—á—É**\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:"
        keyboard = []
        for item_id, item in SHOP_ITEMS.items():
            price_grn = item['price'] // 100
            keyboard.append([InlineKeyboardButton(f"{item['name']} - {price_grn} –≥—Ä–Ω", callback_data=f'buy_{item_id}')])
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')])
        await query.edit_message_text(shop_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)

    async def show_help(self, query: Update):
        """–ü–æ–∫–∞–∑—É—î –¥–æ–ø–æ–º–æ–≥—É."""
        help_text = "‚ùì **–î–æ–ø–æ–º–æ–≥–∞**\n\n–°—Ç—Ä–∏–±–∞–π—Ç–µ —è–∫–æ–º–æ–≥–∞ –≤–∏—â–µ, –∑–±–∏—Ä–∞–π—Ç–µ –∑–µ—Ä–Ω–∞ —Ç–∞ –Ω–µ –ø–∞–¥–∞–π—Ç–µ!"
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')]]
        await query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)

    async def back_to_main(self, query: Update):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        user = query.from_user
        welcome_message = f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã\n\n–ì–æ—Ç–æ–≤–∏–π –¥–æ –≥—Ä–∏? –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ! üëá"
        keyboard = [
            [InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game"))],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
                InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤", callback_data='leaderboard')
            ],
            [
                InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop'),
                InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')
            ]
        ]
        await query.edit_message_text(welcome_message, reply_markup=InlineKeyboardMarkup(keyboard))

# –°—Ç–≤–æ—Ä—é—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—É –±–æ—Ç–∞, —è–∫–∏–π –±—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—Å—å–æ–º—É –¥–æ–¥–∞—Ç–∫—É.
perky_bot = PerkyCoffeeBot()

async def setup_bot():
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î –µ–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç Application, –¥–æ–¥–∞—î –¥–æ –Ω—å–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    –∫–æ–º–∞–Ω–¥ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –≤–µ–±—Ö—É–∫, —â–æ–± Telegram –º—ñ–≥ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    """
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Application –∑ —Ç–æ–∫–µ–Ω–æ–º
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", perky_bot.start))
    application.add_handler(CallbackQueryHandler(perky_bot.button_callback))

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ application –≤ –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑ —ñ–Ω—à–∏—Ö —á–∞—Å—Ç–∏–Ω –∫–æ–¥—É
    perky_bot.application = application

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
    webhook_url = f"{WEBAPP_URL}/{BOT_TOKEN}"
    await application.bot.set_webhook(webhook_url)
    logger.info(f"–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {webhook_url}")

