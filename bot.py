import logging
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode
from telegram.error import RetryAfter

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Ç–∞ –±–∞–∑—É –¥–∞–Ω–∏—Ö
from config import BOT_TOKEN, WEBAPP_URL, WEBHOOK_URL # –û–ù–û–í–õ–ï–ù–û: –î–æ–¥–∞–Ω–æ WEBHOOK_URL
from database import db

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

class PerkyCoffeeBot:
    """
    –ö–ª–∞—Å, —â–æ —ñ–Ω–∫–∞–ø—Å—É–ª—é—î –≤—Å—é –ª–æ–≥—ñ–∫—É Telegram-–±–æ—Ç–∞.
    """
    def __init__(self):
        self.application = None
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π WEBHOOK_URL
        self.webhook_url = WEBHOOK_URL 

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start."""
        user = update.effective_user
        db.save_user(user.id, user.username, user.first_name)
        
        welcome_message = (
            f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã\n\n"
            "–Ø - <b>Perky Coffee Jump Bot</b>! ü§ñ‚òï\n\n"
            "–ì–æ—Ç–æ–≤–∏–π –¥–æ –≥—Ä–∏? –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ! üëá"
        )
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game"))],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
                InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data='leaderboard')
            ],
            [
                InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop'),
                InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_html(welcome_message, reply_markup=reply_markup)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        await query.answer()

        action = query.data
        if action == 'stats':
            await self.show_stats(query)
        elif action == 'leaderboard':
            await self.show_leaderboard(query)
        elif action == 'shop':
            await self.show_shop(query)
        elif action == 'help':
            await self.show_help(query)
        elif action == 'back_main':
            await self.back_to_main(query)

    async def show_stats(self, query: Update):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        user_id = query.from_user.id
        stats = db.get_user_stats(user_id)
        
        if not stats or stats['games_played'] == 0:
            stats_text = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n–í–∏ —â–µ –Ω–µ –∑—ñ–≥—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –≥—Ä–∏. –ß–∞—Å –ø–æ—á–∞—Ç–∏!"
        else:
            stats_text = (
                f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                f"üèÜ <b>–†–µ–∫–æ—Ä–¥ –≤–∏—Å–æ—Ç–∏:</b> {stats['max_height']} –º\n"
                f"‚òï <b>–í—Å—å–æ–≥–æ –∑–µ—Ä–µ–Ω:</b> {stats['total_beans']}\n"
                f"üïπÔ∏è <b>–ó—ñ–≥—Ä–∞–Ω–æ —ñ–≥–æ—Ä:</b> {stats['games_played']} \n"
                f"ü§ñ <b>–ê–∫—Ç–∏–≤–Ω–∏–π —Å–∫—ñ–Ω:</b> {stats.get('active_skin', 'default')}"
            )

        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(stats_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

    async def show_leaderboard(self, query: Update):
        """–ü–æ–∫–∞–∑—É—î —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤."""
        leaderboard = db.get_leaderboard()
        
        if not leaderboard:
            leaderboard_text = "üèÜ <b>–¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤:</b>\n\n–ü–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—å–æ. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä—à–∏–º!"
        else:
            leaderboard_text = "üèÜ <b>–¢–æ–ø-10 –≥—Ä–∞–≤—Ü—ñ–≤:</b>\n\n"
            emojis = ["ü•á", "ü•à", "ü•â"]
            for i, user in enumerate(leaderboard):
                name = user.get('username') or user.get('first_name') or "–ì—Ä–∞–≤–µ—Ü—å"
                max_height = user.get('max_height', 0)
                emoji = emojis[i] if i < 3 else f"<b>{i+1}.</b>"
                leaderboard_text += f"{emoji} {name} - {max_height} –º\n"

        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(leaderboard_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        
    async def show_shop(self, query: Update):
        """–ü–æ–∫–∞–∑—É—î –º–∞–≥–∞–∑–∏–Ω."""
        shop_text = "üõí <b>–ú–∞–≥–∞–∑–∏–Ω –º–µ—Ä—á—É:</b>\n\n–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏ –Ω–æ–≤—ñ —Å–∫—ñ–Ω–∏ –∑–∞ –∑—ñ–±—Ä–∞–Ω—ñ –∫–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞!"
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(shop_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

    async def show_help(self, query: Update):
        """–ü–æ–∫–∞–∑—É—î –¥–æ–ø–æ–º–æ–≥—É."""
        help_text = (
            "‚ùì <b>–î–æ–ø–æ–º–æ–≥–∞:</b>\n\n"
            "–ö–µ—Ä—É–π—Ç–µ –∫–∞–≤–æ–≤–∏–º —Ä–æ–±–æ—Ç–æ–º, —Å—Ç—Ä–∏–±–∞–π—Ç–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö —ñ –∑–±–∏—Ä–∞–π—Ç–µ –∫–∞–≤–æ–≤—ñ –∑–µ—Ä–Ω–∞. "
            "–ß–∏–º –≤–∏—â–µ –≤–∏ —Å—Ç—Ä–∏–±–Ω–µ—Ç–µ, —Ç–∏–º –∫—Ä–∞—â–∏–º –±—É–¥–µ –≤–∞—à —Ä–µ–∫–æ—Ä–¥!"
        )
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(help_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

    async def back_to_main(self, query: Update):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
        user = query.from_user
        welcome_message = (
            f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã\n\n"
            "–Ø - <b>Perky Coffee Jump Bot</b>! ü§ñ‚òï\n\n"
            "–ì–æ—Ç–æ–≤–∏–π –¥–æ –≥—Ä–∏? –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ! üëá"
        )
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game"))],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
                InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data='leaderboard')
            ],
            [
                InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop'),
                InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(welcome_message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

# –°—Ç–≤–æ—Ä—é—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
perky_bot = PerkyCoffeeBot()

async def setup_bot_handlers():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î –¥–æ–¥–∞—Ç–æ–∫ –±–æ—Ç–∞."""
    logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É Telegram-–±–æ—Ç–∞...")
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", perky_bot.start))
    application.add_handler(CallbackQueryHandler(perky_bot.button_callback))
    
    perky_bot.application = application
    logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–¥–∞–Ω–æ.")
